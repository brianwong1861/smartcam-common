// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: financial/financial.proto

package financial

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FinancialService_CreateRecharge_FullMethodName                    = "/financial.FinancialService/CreateRecharge"
	FinancialService_GetRecharge_FullMethodName                       = "/financial.FinancialService/GetRecharge"
	FinancialService_UpdateRecharge_FullMethodName                    = "/financial.FinancialService/UpdateRecharge"
	FinancialService_ListRecharges_FullMethodName                     = "/financial.FinancialService/ListRecharges"
	FinancialService_ProcessRefund_FullMethodName                     = "/financial.FinancialService/ProcessRefund"
	FinancialService_GetRechargeStatistics_FullMethodName             = "/financial.FinancialService/GetRechargeStatistics"
	FinancialService_CreateProfitSharing_FullMethodName               = "/financial.FinancialService/CreateProfitSharing"
	FinancialService_GetProfitSharing_FullMethodName                  = "/financial.FinancialService/GetProfitSharing"
	FinancialService_UpdateProfitSharing_FullMethodName               = "/financial.FinancialService/UpdateProfitSharing"
	FinancialService_ListProfitSharing_FullMethodName                 = "/financial.FinancialService/ListProfitSharing"
	FinancialService_CalculateProfitSharingForRecharge_FullMethodName = "/financial.FinancialService/CalculateProfitSharingForRecharge"
	FinancialService_MarkProfitSharingAsPaid_FullMethodName           = "/financial.FinancialService/MarkProfitSharingAsPaid"
	FinancialService_CancelProfitSharing_FullMethodName               = "/financial.FinancialService/CancelProfitSharing"
	FinancialService_GenerateFinancialStatement_FullMethodName        = "/financial.FinancialService/GenerateFinancialStatement"
	FinancialService_GetFinancialStatement_FullMethodName             = "/financial.FinancialService/GetFinancialStatement"
	FinancialService_ApproveFinancialStatement_FullMethodName         = "/financial.FinancialService/ApproveFinancialStatement"
	FinancialService_ListFinancialStatements_FullMethodName           = "/financial.FinancialService/ListFinancialStatements"
)

// FinancialServiceClient is the client API for FinancialService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FinancialServiceClient interface {
	// Recharge management
	CreateRecharge(ctx context.Context, in *CreateRechargeRequest, opts ...grpc.CallOption) (*CreateRechargeResponse, error)
	GetRecharge(ctx context.Context, in *GetRechargeRequest, opts ...grpc.CallOption) (*GetRechargeResponse, error)
	UpdateRecharge(ctx context.Context, in *UpdateRechargeRequest, opts ...grpc.CallOption) (*UpdateRechargeResponse, error)
	ListRecharges(ctx context.Context, in *ListRechargesRequest, opts ...grpc.CallOption) (*ListRechargesResponse, error)
	ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error)
	GetRechargeStatistics(ctx context.Context, in *GetRechargeStatisticsRequest, opts ...grpc.CallOption) (*GetRechargeStatisticsResponse, error)
	// Profit sharing management
	CreateProfitSharing(ctx context.Context, in *CreateProfitSharingRequest, opts ...grpc.CallOption) (*CreateProfitSharingResponse, error)
	GetProfitSharing(ctx context.Context, in *GetProfitSharingRequest, opts ...grpc.CallOption) (*GetProfitSharingResponse, error)
	UpdateProfitSharing(ctx context.Context, in *UpdateProfitSharingRequest, opts ...grpc.CallOption) (*UpdateProfitSharingResponse, error)
	ListProfitSharing(ctx context.Context, in *ListProfitSharingRequest, opts ...grpc.CallOption) (*ListProfitSharingResponse, error)
	CalculateProfitSharingForRecharge(ctx context.Context, in *CalculateProfitSharingForRechargeRequest, opts ...grpc.CallOption) (*CalculateProfitSharingForRechargeResponse, error)
	MarkProfitSharingAsPaid(ctx context.Context, in *MarkProfitSharingAsPaidRequest, opts ...grpc.CallOption) (*MarkProfitSharingAsPaidResponse, error)
	CancelProfitSharing(ctx context.Context, in *CancelProfitSharingRequest, opts ...grpc.CallOption) (*CancelProfitSharingResponse, error)
	// Financial statement management
	GenerateFinancialStatement(ctx context.Context, in *GenerateFinancialStatementRequest, opts ...grpc.CallOption) (*GenerateFinancialStatementResponse, error)
	GetFinancialStatement(ctx context.Context, in *GetFinancialStatementRequest, opts ...grpc.CallOption) (*GetFinancialStatementResponse, error)
	ApproveFinancialStatement(ctx context.Context, in *ApproveFinancialStatementRequest, opts ...grpc.CallOption) (*ApproveFinancialStatementResponse, error)
	ListFinancialStatements(ctx context.Context, in *ListFinancialStatementsRequest, opts ...grpc.CallOption) (*ListFinancialStatementsResponse, error)
}

type financialServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFinancialServiceClient(cc grpc.ClientConnInterface) FinancialServiceClient {
	return &financialServiceClient{cc}
}

func (c *financialServiceClient) CreateRecharge(ctx context.Context, in *CreateRechargeRequest, opts ...grpc.CallOption) (*CreateRechargeResponse, error) {
	out := new(CreateRechargeResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetRecharge(ctx context.Context, in *GetRechargeRequest, opts ...grpc.CallOption) (*GetRechargeResponse, error) {
	out := new(GetRechargeResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateRecharge(ctx context.Context, in *UpdateRechargeRequest, opts ...grpc.CallOption) (*UpdateRechargeResponse, error) {
	out := new(UpdateRechargeResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListRecharges(ctx context.Context, in *ListRechargesRequest, opts ...grpc.CallOption) (*ListRechargesResponse, error) {
	out := new(ListRechargesResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListRecharges_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ProcessRefund(ctx context.Context, in *ProcessRefundRequest, opts ...grpc.CallOption) (*ProcessRefundResponse, error) {
	out := new(ProcessRefundResponse)
	err := c.cc.Invoke(ctx, FinancialService_ProcessRefund_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetRechargeStatistics(ctx context.Context, in *GetRechargeStatisticsRequest, opts ...grpc.CallOption) (*GetRechargeStatisticsResponse, error) {
	out := new(GetRechargeStatisticsResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetRechargeStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CreateProfitSharing(ctx context.Context, in *CreateProfitSharingRequest, opts ...grpc.CallOption) (*CreateProfitSharingResponse, error) {
	out := new(CreateProfitSharingResponse)
	err := c.cc.Invoke(ctx, FinancialService_CreateProfitSharing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetProfitSharing(ctx context.Context, in *GetProfitSharingRequest, opts ...grpc.CallOption) (*GetProfitSharingResponse, error) {
	out := new(GetProfitSharingResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetProfitSharing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) UpdateProfitSharing(ctx context.Context, in *UpdateProfitSharingRequest, opts ...grpc.CallOption) (*UpdateProfitSharingResponse, error) {
	out := new(UpdateProfitSharingResponse)
	err := c.cc.Invoke(ctx, FinancialService_UpdateProfitSharing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListProfitSharing(ctx context.Context, in *ListProfitSharingRequest, opts ...grpc.CallOption) (*ListProfitSharingResponse, error) {
	out := new(ListProfitSharingResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListProfitSharing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CalculateProfitSharingForRecharge(ctx context.Context, in *CalculateProfitSharingForRechargeRequest, opts ...grpc.CallOption) (*CalculateProfitSharingForRechargeResponse, error) {
	out := new(CalculateProfitSharingForRechargeResponse)
	err := c.cc.Invoke(ctx, FinancialService_CalculateProfitSharingForRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) MarkProfitSharingAsPaid(ctx context.Context, in *MarkProfitSharingAsPaidRequest, opts ...grpc.CallOption) (*MarkProfitSharingAsPaidResponse, error) {
	out := new(MarkProfitSharingAsPaidResponse)
	err := c.cc.Invoke(ctx, FinancialService_MarkProfitSharingAsPaid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) CancelProfitSharing(ctx context.Context, in *CancelProfitSharingRequest, opts ...grpc.CallOption) (*CancelProfitSharingResponse, error) {
	out := new(CancelProfitSharingResponse)
	err := c.cc.Invoke(ctx, FinancialService_CancelProfitSharing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GenerateFinancialStatement(ctx context.Context, in *GenerateFinancialStatementRequest, opts ...grpc.CallOption) (*GenerateFinancialStatementResponse, error) {
	out := new(GenerateFinancialStatementResponse)
	err := c.cc.Invoke(ctx, FinancialService_GenerateFinancialStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) GetFinancialStatement(ctx context.Context, in *GetFinancialStatementRequest, opts ...grpc.CallOption) (*GetFinancialStatementResponse, error) {
	out := new(GetFinancialStatementResponse)
	err := c.cc.Invoke(ctx, FinancialService_GetFinancialStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ApproveFinancialStatement(ctx context.Context, in *ApproveFinancialStatementRequest, opts ...grpc.CallOption) (*ApproveFinancialStatementResponse, error) {
	out := new(ApproveFinancialStatementResponse)
	err := c.cc.Invoke(ctx, FinancialService_ApproveFinancialStatement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *financialServiceClient) ListFinancialStatements(ctx context.Context, in *ListFinancialStatementsRequest, opts ...grpc.CallOption) (*ListFinancialStatementsResponse, error) {
	out := new(ListFinancialStatementsResponse)
	err := c.cc.Invoke(ctx, FinancialService_ListFinancialStatements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FinancialServiceServer is the server API for FinancialService service.
// All implementations must embed UnimplementedFinancialServiceServer
// for forward compatibility
type FinancialServiceServer interface {
	// Recharge management
	CreateRecharge(context.Context, *CreateRechargeRequest) (*CreateRechargeResponse, error)
	GetRecharge(context.Context, *GetRechargeRequest) (*GetRechargeResponse, error)
	UpdateRecharge(context.Context, *UpdateRechargeRequest) (*UpdateRechargeResponse, error)
	ListRecharges(context.Context, *ListRechargesRequest) (*ListRechargesResponse, error)
	ProcessRefund(context.Context, *ProcessRefundRequest) (*ProcessRefundResponse, error)
	GetRechargeStatistics(context.Context, *GetRechargeStatisticsRequest) (*GetRechargeStatisticsResponse, error)
	// Profit sharing management
	CreateProfitSharing(context.Context, *CreateProfitSharingRequest) (*CreateProfitSharingResponse, error)
	GetProfitSharing(context.Context, *GetProfitSharingRequest) (*GetProfitSharingResponse, error)
	UpdateProfitSharing(context.Context, *UpdateProfitSharingRequest) (*UpdateProfitSharingResponse, error)
	ListProfitSharing(context.Context, *ListProfitSharingRequest) (*ListProfitSharingResponse, error)
	CalculateProfitSharingForRecharge(context.Context, *CalculateProfitSharingForRechargeRequest) (*CalculateProfitSharingForRechargeResponse, error)
	MarkProfitSharingAsPaid(context.Context, *MarkProfitSharingAsPaidRequest) (*MarkProfitSharingAsPaidResponse, error)
	CancelProfitSharing(context.Context, *CancelProfitSharingRequest) (*CancelProfitSharingResponse, error)
	// Financial statement management
	GenerateFinancialStatement(context.Context, *GenerateFinancialStatementRequest) (*GenerateFinancialStatementResponse, error)
	GetFinancialStatement(context.Context, *GetFinancialStatementRequest) (*GetFinancialStatementResponse, error)
	ApproveFinancialStatement(context.Context, *ApproveFinancialStatementRequest) (*ApproveFinancialStatementResponse, error)
	ListFinancialStatements(context.Context, *ListFinancialStatementsRequest) (*ListFinancialStatementsResponse, error)
	mustEmbedUnimplementedFinancialServiceServer()
}

// UnimplementedFinancialServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFinancialServiceServer struct {
}

func (UnimplementedFinancialServiceServer) CreateRecharge(context.Context, *CreateRechargeRequest) (*CreateRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecharge not implemented")
}
func (UnimplementedFinancialServiceServer) GetRecharge(context.Context, *GetRechargeRequest) (*GetRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecharge not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateRecharge(context.Context, *UpdateRechargeRequest) (*UpdateRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecharge not implemented")
}
func (UnimplementedFinancialServiceServer) ListRecharges(context.Context, *ListRechargesRequest) (*ListRechargesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecharges not implemented")
}
func (UnimplementedFinancialServiceServer) ProcessRefund(context.Context, *ProcessRefundRequest) (*ProcessRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessRefund not implemented")
}
func (UnimplementedFinancialServiceServer) GetRechargeStatistics(context.Context, *GetRechargeStatisticsRequest) (*GetRechargeStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRechargeStatistics not implemented")
}
func (UnimplementedFinancialServiceServer) CreateProfitSharing(context.Context, *CreateProfitSharingRequest) (*CreateProfitSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfitSharing not implemented")
}
func (UnimplementedFinancialServiceServer) GetProfitSharing(context.Context, *GetProfitSharingRequest) (*GetProfitSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfitSharing not implemented")
}
func (UnimplementedFinancialServiceServer) UpdateProfitSharing(context.Context, *UpdateProfitSharingRequest) (*UpdateProfitSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProfitSharing not implemented")
}
func (UnimplementedFinancialServiceServer) ListProfitSharing(context.Context, *ListProfitSharingRequest) (*ListProfitSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProfitSharing not implemented")
}
func (UnimplementedFinancialServiceServer) CalculateProfitSharingForRecharge(context.Context, *CalculateProfitSharingForRechargeRequest) (*CalculateProfitSharingForRechargeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateProfitSharingForRecharge not implemented")
}
func (UnimplementedFinancialServiceServer) MarkProfitSharingAsPaid(context.Context, *MarkProfitSharingAsPaidRequest) (*MarkProfitSharingAsPaidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkProfitSharingAsPaid not implemented")
}
func (UnimplementedFinancialServiceServer) CancelProfitSharing(context.Context, *CancelProfitSharingRequest) (*CancelProfitSharingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelProfitSharing not implemented")
}
func (UnimplementedFinancialServiceServer) GenerateFinancialStatement(context.Context, *GenerateFinancialStatementRequest) (*GenerateFinancialStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateFinancialStatement not implemented")
}
func (UnimplementedFinancialServiceServer) GetFinancialStatement(context.Context, *GetFinancialStatementRequest) (*GetFinancialStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFinancialStatement not implemented")
}
func (UnimplementedFinancialServiceServer) ApproveFinancialStatement(context.Context, *ApproveFinancialStatementRequest) (*ApproveFinancialStatementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveFinancialStatement not implemented")
}
func (UnimplementedFinancialServiceServer) ListFinancialStatements(context.Context, *ListFinancialStatementsRequest) (*ListFinancialStatementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFinancialStatements not implemented")
}
func (UnimplementedFinancialServiceServer) mustEmbedUnimplementedFinancialServiceServer() {}

// UnsafeFinancialServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FinancialServiceServer will
// result in compilation errors.
type UnsafeFinancialServiceServer interface {
	mustEmbedUnimplementedFinancialServiceServer()
}

func RegisterFinancialServiceServer(s grpc.ServiceRegistrar, srv FinancialServiceServer) {
	s.RegisterService(&FinancialService_ServiceDesc, srv)
}

func _FinancialService_CreateRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateRecharge(ctx, req.(*CreateRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetRecharge(ctx, req.(*GetRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateRecharge(ctx, req.(*UpdateRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListRecharges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRechargesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListRecharges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListRecharges_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListRecharges(ctx, req.(*ListRechargesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ProcessRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ProcessRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ProcessRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ProcessRefund(ctx, req.(*ProcessRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetRechargeStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRechargeStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetRechargeStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetRechargeStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetRechargeStatistics(ctx, req.(*GetRechargeStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CreateProfitSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CreateProfitSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CreateProfitSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CreateProfitSharing(ctx, req.(*CreateProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetProfitSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetProfitSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetProfitSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetProfitSharing(ctx, req.(*GetProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_UpdateProfitSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).UpdateProfitSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_UpdateProfitSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).UpdateProfitSharing(ctx, req.(*UpdateProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListProfitSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListProfitSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListProfitSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListProfitSharing(ctx, req.(*ListProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CalculateProfitSharingForRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateProfitSharingForRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CalculateProfitSharingForRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CalculateProfitSharingForRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CalculateProfitSharingForRecharge(ctx, req.(*CalculateProfitSharingForRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_MarkProfitSharingAsPaid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkProfitSharingAsPaidRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).MarkProfitSharingAsPaid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_MarkProfitSharingAsPaid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).MarkProfitSharingAsPaid(ctx, req.(*MarkProfitSharingAsPaidRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_CancelProfitSharing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelProfitSharingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).CancelProfitSharing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_CancelProfitSharing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).CancelProfitSharing(ctx, req.(*CancelProfitSharingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GenerateFinancialStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateFinancialStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GenerateFinancialStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GenerateFinancialStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GenerateFinancialStatement(ctx, req.(*GenerateFinancialStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_GetFinancialStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFinancialStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).GetFinancialStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_GetFinancialStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).GetFinancialStatement(ctx, req.(*GetFinancialStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ApproveFinancialStatement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveFinancialStatementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ApproveFinancialStatement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ApproveFinancialStatement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ApproveFinancialStatement(ctx, req.(*ApproveFinancialStatementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FinancialService_ListFinancialStatements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFinancialStatementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FinancialServiceServer).ListFinancialStatements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FinancialService_ListFinancialStatements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FinancialServiceServer).ListFinancialStatements(ctx, req.(*ListFinancialStatementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FinancialService_ServiceDesc is the grpc.ServiceDesc for FinancialService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FinancialService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "financial.FinancialService",
	HandlerType: (*FinancialServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecharge",
			Handler:    _FinancialService_CreateRecharge_Handler,
		},
		{
			MethodName: "GetRecharge",
			Handler:    _FinancialService_GetRecharge_Handler,
		},
		{
			MethodName: "UpdateRecharge",
			Handler:    _FinancialService_UpdateRecharge_Handler,
		},
		{
			MethodName: "ListRecharges",
			Handler:    _FinancialService_ListRecharges_Handler,
		},
		{
			MethodName: "ProcessRefund",
			Handler:    _FinancialService_ProcessRefund_Handler,
		},
		{
			MethodName: "GetRechargeStatistics",
			Handler:    _FinancialService_GetRechargeStatistics_Handler,
		},
		{
			MethodName: "CreateProfitSharing",
			Handler:    _FinancialService_CreateProfitSharing_Handler,
		},
		{
			MethodName: "GetProfitSharing",
			Handler:    _FinancialService_GetProfitSharing_Handler,
		},
		{
			MethodName: "UpdateProfitSharing",
			Handler:    _FinancialService_UpdateProfitSharing_Handler,
		},
		{
			MethodName: "ListProfitSharing",
			Handler:    _FinancialService_ListProfitSharing_Handler,
		},
		{
			MethodName: "CalculateProfitSharingForRecharge",
			Handler:    _FinancialService_CalculateProfitSharingForRecharge_Handler,
		},
		{
			MethodName: "MarkProfitSharingAsPaid",
			Handler:    _FinancialService_MarkProfitSharingAsPaid_Handler,
		},
		{
			MethodName: "CancelProfitSharing",
			Handler:    _FinancialService_CancelProfitSharing_Handler,
		},
		{
			MethodName: "GenerateFinancialStatement",
			Handler:    _FinancialService_GenerateFinancialStatement_Handler,
		},
		{
			MethodName: "GetFinancialStatement",
			Handler:    _FinancialService_GetFinancialStatement_Handler,
		},
		{
			MethodName: "ApproveFinancialStatement",
			Handler:    _FinancialService_ApproveFinancialStatement_Handler,
		},
		{
			MethodName: "ListFinancialStatements",
			Handler:    _FinancialService_ListFinancialStatements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "financial/financial.proto",
}
