// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.1
// source: financial/financial.proto

package financial

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type RechargeStatus int32

const (
	RechargeStatus_RECHARGE_STATUS_PENDING    RechargeStatus = 0
	RechargeStatus_RECHARGE_STATUS_PROCESSING RechargeStatus = 1
	RechargeStatus_RECHARGE_STATUS_COMPLETED  RechargeStatus = 2
	RechargeStatus_RECHARGE_STATUS_FAILED     RechargeStatus = 3
	RechargeStatus_RECHARGE_STATUS_CANCELLED  RechargeStatus = 4
	RechargeStatus_RECHARGE_STATUS_REFUNDED   RechargeStatus = 5
)

// Enum value maps for RechargeStatus.
var (
	RechargeStatus_name = map[int32]string{
		0: "RECHARGE_STATUS_PENDING",
		1: "RECHARGE_STATUS_PROCESSING",
		2: "RECHARGE_STATUS_COMPLETED",
		3: "RECHARGE_STATUS_FAILED",
		4: "RECHARGE_STATUS_CANCELLED",
		5: "RECHARGE_STATUS_REFUNDED",
	}
	RechargeStatus_value = map[string]int32{
		"RECHARGE_STATUS_PENDING":    0,
		"RECHARGE_STATUS_PROCESSING": 1,
		"RECHARGE_STATUS_COMPLETED":  2,
		"RECHARGE_STATUS_FAILED":     3,
		"RECHARGE_STATUS_CANCELLED":  4,
		"RECHARGE_STATUS_REFUNDED":   5,
	}
)

func (x RechargeStatus) Enum() *RechargeStatus {
	p := new(RechargeStatus)
	*p = x
	return p
}

func (x RechargeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RechargeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_financial_proto_enumTypes[0].Descriptor()
}

func (RechargeStatus) Type() protoreflect.EnumType {
	return &file_financial_financial_proto_enumTypes[0]
}

func (x RechargeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RechargeStatus.Descriptor instead.
func (RechargeStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{0}
}

type PaymentMethod int32

const (
	PaymentMethod_PAYMENT_METHOD_ALIPAY     PaymentMethod = 0
	PaymentMethod_PAYMENT_METHOD_WECHATPAY  PaymentMethod = 1
	PaymentMethod_PAYMENT_METHOD_BANKCARD   PaymentMethod = 2
	PaymentMethod_PAYMENT_METHOD_PAYPAL     PaymentMethod = 3
	PaymentMethod_PAYMENT_METHOD_STRIPE     PaymentMethod = 4
	PaymentMethod_PAYMENT_METHOD_CREDITCARD PaymentMethod = 5
)

// Enum value maps for PaymentMethod.
var (
	PaymentMethod_name = map[int32]string{
		0: "PAYMENT_METHOD_ALIPAY",
		1: "PAYMENT_METHOD_WECHATPAY",
		2: "PAYMENT_METHOD_BANKCARD",
		3: "PAYMENT_METHOD_PAYPAL",
		4: "PAYMENT_METHOD_STRIPE",
		5: "PAYMENT_METHOD_CREDITCARD",
	}
	PaymentMethod_value = map[string]int32{
		"PAYMENT_METHOD_ALIPAY":     0,
		"PAYMENT_METHOD_WECHATPAY":  1,
		"PAYMENT_METHOD_BANKCARD":   2,
		"PAYMENT_METHOD_PAYPAL":     3,
		"PAYMENT_METHOD_STRIPE":     4,
		"PAYMENT_METHOD_CREDITCARD": 5,
	}
)

func (x PaymentMethod) Enum() *PaymentMethod {
	p := new(PaymentMethod)
	*p = x
	return p
}

func (x PaymentMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_financial_proto_enumTypes[1].Descriptor()
}

func (PaymentMethod) Type() protoreflect.EnumType {
	return &file_financial_financial_proto_enumTypes[1]
}

func (x PaymentMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod.Descriptor instead.
func (PaymentMethod) EnumDescriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{1}
}

type RechargeType int32

const (
	RechargeType_RECHARGE_TYPE_STORAGE RechargeType = 0
	RechargeType_RECHARGE_TYPE_SERVICE RechargeType = 1
	RechargeType_RECHARGE_TYPE_PACKAGE RechargeType = 2
)

// Enum value maps for RechargeType.
var (
	RechargeType_name = map[int32]string{
		0: "RECHARGE_TYPE_STORAGE",
		1: "RECHARGE_TYPE_SERVICE",
		2: "RECHARGE_TYPE_PACKAGE",
	}
	RechargeType_value = map[string]int32{
		"RECHARGE_TYPE_STORAGE": 0,
		"RECHARGE_TYPE_SERVICE": 1,
		"RECHARGE_TYPE_PACKAGE": 2,
	}
)

func (x RechargeType) Enum() *RechargeType {
	p := new(RechargeType)
	*p = x
	return p
}

func (x RechargeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RechargeType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_financial_proto_enumTypes[2].Descriptor()
}

func (RechargeType) Type() protoreflect.EnumType {
	return &file_financial_financial_proto_enumTypes[2]
}

func (x RechargeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RechargeType.Descriptor instead.
func (RechargeType) EnumDescriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{2}
}

type ProfitSharingStatus int32

const (
	ProfitSharingStatus_PROFIT_SHARING_STATUS_PENDING    ProfitSharingStatus = 0
	ProfitSharingStatus_PROFIT_SHARING_STATUS_CALCULATED ProfitSharingStatus = 1
	ProfitSharingStatus_PROFIT_SHARING_STATUS_PAID       ProfitSharingStatus = 2
	ProfitSharingStatus_PROFIT_SHARING_STATUS_CANCELLED  ProfitSharingStatus = 3
)

// Enum value maps for ProfitSharingStatus.
var (
	ProfitSharingStatus_name = map[int32]string{
		0: "PROFIT_SHARING_STATUS_PENDING",
		1: "PROFIT_SHARING_STATUS_CALCULATED",
		2: "PROFIT_SHARING_STATUS_PAID",
		3: "PROFIT_SHARING_STATUS_CANCELLED",
	}
	ProfitSharingStatus_value = map[string]int32{
		"PROFIT_SHARING_STATUS_PENDING":    0,
		"PROFIT_SHARING_STATUS_CALCULATED": 1,
		"PROFIT_SHARING_STATUS_PAID":       2,
		"PROFIT_SHARING_STATUS_CANCELLED":  3,
	}
)

func (x ProfitSharingStatus) Enum() *ProfitSharingStatus {
	p := new(ProfitSharingStatus)
	*p = x
	return p
}

func (x ProfitSharingStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfitSharingStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_financial_proto_enumTypes[3].Descriptor()
}

func (ProfitSharingStatus) Type() protoreflect.EnumType {
	return &file_financial_financial_proto_enumTypes[3]
}

func (x ProfitSharingStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfitSharingStatus.Descriptor instead.
func (ProfitSharingStatus) EnumDescriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{3}
}

type ProfitSharingType int32

const (
	ProfitSharingType_PROFIT_SHARING_TYPE_RECHARGE     ProfitSharingType = 0
	ProfitSharingType_PROFIT_SHARING_TYPE_SUBSCRIPTION ProfitSharingType = 1
	ProfitSharingType_PROFIT_SHARING_TYPE_STORAGE      ProfitSharingType = 2
	ProfitSharingType_PROFIT_SHARING_TYPE_SERVICE      ProfitSharingType = 3
)

// Enum value maps for ProfitSharingType.
var (
	ProfitSharingType_name = map[int32]string{
		0: "PROFIT_SHARING_TYPE_RECHARGE",
		1: "PROFIT_SHARING_TYPE_SUBSCRIPTION",
		2: "PROFIT_SHARING_TYPE_STORAGE",
		3: "PROFIT_SHARING_TYPE_SERVICE",
	}
	ProfitSharingType_value = map[string]int32{
		"PROFIT_SHARING_TYPE_RECHARGE":     0,
		"PROFIT_SHARING_TYPE_SUBSCRIPTION": 1,
		"PROFIT_SHARING_TYPE_STORAGE":      2,
		"PROFIT_SHARING_TYPE_SERVICE":      3,
	}
)

func (x ProfitSharingType) Enum() *ProfitSharingType {
	p := new(ProfitSharingType)
	*p = x
	return p
}

func (x ProfitSharingType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProfitSharingType) Descriptor() protoreflect.EnumDescriptor {
	return file_financial_financial_proto_enumTypes[4].Descriptor()
}

func (ProfitSharingType) Type() protoreflect.EnumType {
	return &file_financial_financial_proto_enumTypes[4]
}

func (x ProfitSharingType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProfitSharingType.Descriptor instead.
func (ProfitSharingType) EnumDescriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{4}
}

// Recharge Messages
type CreateRechargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId          uint32        `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TenantId        string        `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Amount          float64       `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string        `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Type            RechargeType  `protobuf:"varint,5,opt,name=type,proto3,enum=financial.RechargeType" json:"type,omitempty"`
	PaymentMethod   PaymentMethod `protobuf:"varint,6,opt,name=payment_method,json=paymentMethod,proto3,enum=financial.PaymentMethod" json:"payment_method,omitempty"`
	StorageAmount   float64       `protobuf:"fixed64,7,opt,name=storage_amount,json=storageAmount,proto3" json:"storage_amount,omitempty"`
	StorageDuration int32         `protobuf:"varint,8,opt,name=storage_duration,json=storageDuration,proto3" json:"storage_duration,omitempty"`
	Description     string        `protobuf:"bytes,9,opt,name=description,proto3" json:"description,omitempty"`
	CreatedBy       uint32        `protobuf:"varint,10,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
}

func (x *CreateRechargeRequest) Reset() {
	*x = CreateRechargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRechargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRechargeRequest) ProtoMessage() {}

func (x *CreateRechargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRechargeRequest.ProtoReflect.Descriptor instead.
func (*CreateRechargeRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRechargeRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateRechargeRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateRechargeRequest) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreateRechargeRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreateRechargeRequest) GetType() RechargeType {
	if x != nil {
		return x.Type
	}
	return RechargeType_RECHARGE_TYPE_STORAGE
}

func (x *CreateRechargeRequest) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_PAYMENT_METHOD_ALIPAY
}

func (x *CreateRechargeRequest) GetStorageAmount() float64 {
	if x != nil {
		return x.StorageAmount
	}
	return 0
}

func (x *CreateRechargeRequest) GetStorageDuration() int32 {
	if x != nil {
		return x.StorageDuration
	}
	return 0
}

func (x *CreateRechargeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateRechargeRequest) GetCreatedBy() uint32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

type CreateRechargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recharge *Recharge `protobuf:"bytes,1,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (x *CreateRechargeResponse) Reset() {
	*x = CreateRechargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRechargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRechargeResponse) ProtoMessage() {}

func (x *CreateRechargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRechargeResponse.ProtoReflect.Descriptor instead.
func (*CreateRechargeResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRechargeResponse) GetRecharge() *Recharge {
	if x != nil {
		return x.Recharge
	}
	return nil
}

type GetRechargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetRechargeRequest) Reset() {
	*x = GetRechargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRechargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRechargeRequest) ProtoMessage() {}

func (x *GetRechargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRechargeRequest.ProtoReflect.Descriptor instead.
func (*GetRechargeRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{2}
}

func (x *GetRechargeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetRechargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recharge *Recharge `protobuf:"bytes,1,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (x *GetRechargeResponse) Reset() {
	*x = GetRechargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRechargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRechargeResponse) ProtoMessage() {}

func (x *GetRechargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRechargeResponse.ProtoReflect.Descriptor instead.
func (*GetRechargeResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{3}
}

func (x *GetRechargeResponse) GetRecharge() *Recharge {
	if x != nil {
		return x.Recharge
	}
	return nil
}

type UpdateRechargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string          `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status       *RechargeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=financial.RechargeStatus,oneof" json:"status,omitempty"`
	PaymentId    *string         `protobuf:"bytes,3,opt,name=payment_id,json=paymentId,proto3,oneof" json:"payment_id,omitempty"`
	PaymentUrl   *string         `protobuf:"bytes,4,opt,name=payment_url,json=paymentUrl,proto3,oneof" json:"payment_url,omitempty"`
	FailedReason *string         `protobuf:"bytes,5,opt,name=failed_reason,json=failedReason,proto3,oneof" json:"failed_reason,omitempty"`
	RefundAmount *float64        `protobuf:"fixed64,6,opt,name=refund_amount,json=refundAmount,proto3,oneof" json:"refund_amount,omitempty"`
	RefundReason *string         `protobuf:"bytes,7,opt,name=refund_reason,json=refundReason,proto3,oneof" json:"refund_reason,omitempty"`
	UpdatedBy    uint32          `protobuf:"varint,8,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *UpdateRechargeRequest) Reset() {
	*x = UpdateRechargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRechargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRechargeRequest) ProtoMessage() {}

func (x *UpdateRechargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRechargeRequest.ProtoReflect.Descriptor instead.
func (*UpdateRechargeRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateRechargeRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateRechargeRequest) GetStatus() RechargeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RechargeStatus_RECHARGE_STATUS_PENDING
}

func (x *UpdateRechargeRequest) GetPaymentId() string {
	if x != nil && x.PaymentId != nil {
		return *x.PaymentId
	}
	return ""
}

func (x *UpdateRechargeRequest) GetPaymentUrl() string {
	if x != nil && x.PaymentUrl != nil {
		return *x.PaymentUrl
	}
	return ""
}

func (x *UpdateRechargeRequest) GetFailedReason() string {
	if x != nil && x.FailedReason != nil {
		return *x.FailedReason
	}
	return ""
}

func (x *UpdateRechargeRequest) GetRefundAmount() float64 {
	if x != nil && x.RefundAmount != nil {
		return *x.RefundAmount
	}
	return 0
}

func (x *UpdateRechargeRequest) GetRefundReason() string {
	if x != nil && x.RefundReason != nil {
		return *x.RefundReason
	}
	return ""
}

func (x *UpdateRechargeRequest) GetUpdatedBy() uint32 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type UpdateRechargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recharge *Recharge `protobuf:"bytes,1,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (x *UpdateRechargeResponse) Reset() {
	*x = UpdateRechargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRechargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRechargeResponse) ProtoMessage() {}

func (x *UpdateRechargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRechargeResponse.ProtoReflect.Descriptor instead.
func (*UpdateRechargeResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateRechargeResponse) GetRecharge() *Recharge {
	if x != nil {
		return x.Recharge
	}
	return nil
}

type ListRechargesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page          int32           `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32           `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SortBy        string          `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder     string          `protobuf:"bytes,4,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	UserId        *uint32         `protobuf:"varint,5,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	DealerUuid    string          `protobuf:"bytes,6,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	Status        *RechargeStatus `protobuf:"varint,7,opt,name=status,proto3,enum=financial.RechargeStatus,oneof" json:"status,omitempty"`
	Type          *RechargeType   `protobuf:"varint,8,opt,name=type,proto3,enum=financial.RechargeType,oneof" json:"type,omitempty"`
	PaymentMethod *PaymentMethod  `protobuf:"varint,9,opt,name=payment_method,json=paymentMethod,proto3,enum=financial.PaymentMethod,oneof" json:"payment_method,omitempty"`
	StartDate     string          `protobuf:"bytes,10,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate       string          `protobuf:"bytes,11,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	Search        string          `protobuf:"bytes,12,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListRechargesRequest) Reset() {
	*x = ListRechargesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRechargesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRechargesRequest) ProtoMessage() {}

func (x *ListRechargesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRechargesRequest.ProtoReflect.Descriptor instead.
func (*ListRechargesRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{6}
}

func (x *ListRechargesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRechargesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRechargesRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListRechargesRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *ListRechargesRequest) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ListRechargesRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *ListRechargesRequest) GetStatus() RechargeStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return RechargeStatus_RECHARGE_STATUS_PENDING
}

func (x *ListRechargesRequest) GetType() RechargeType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return RechargeType_RECHARGE_TYPE_STORAGE
}

func (x *ListRechargesRequest) GetPaymentMethod() PaymentMethod {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return PaymentMethod_PAYMENT_METHOD_ALIPAY
}

func (x *ListRechargesRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ListRechargesRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ListRechargesRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListRechargesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recharges []*Recharge `protobuf:"bytes,1,rep,name=recharges,proto3" json:"recharges,omitempty"`
	Total     int64       `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page      int32       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit     int32       `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListRechargesResponse) Reset() {
	*x = ListRechargesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRechargesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRechargesResponse) ProtoMessage() {}

func (x *ListRechargesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRechargesResponse.ProtoReflect.Descriptor instead.
func (*ListRechargesResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{7}
}

func (x *ListRechargesResponse) GetRecharges() []*Recharge {
	if x != nil {
		return x.Recharges
	}
	return nil
}

func (x *ListRechargesResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRechargesResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListRechargesResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ProcessRefundRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid         string  `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	RefundAmount float64 `protobuf:"fixed64,2,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	RefundReason string  `protobuf:"bytes,3,opt,name=refund_reason,json=refundReason,proto3" json:"refund_reason,omitempty"`
	ProcessedBy  uint32  `protobuf:"varint,4,opt,name=processed_by,json=processedBy,proto3" json:"processed_by,omitempty"`
}

func (x *ProcessRefundRequest) Reset() {
	*x = ProcessRefundRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRefundRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRefundRequest) ProtoMessage() {}

func (x *ProcessRefundRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRefundRequest.ProtoReflect.Descriptor instead.
func (*ProcessRefundRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{8}
}

func (x *ProcessRefundRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProcessRefundRequest) GetRefundAmount() float64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *ProcessRefundRequest) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *ProcessRefundRequest) GetProcessedBy() uint32 {
	if x != nil {
		return x.ProcessedBy
	}
	return 0
}

type ProcessRefundResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recharge *Recharge `protobuf:"bytes,1,opt,name=recharge,proto3" json:"recharge,omitempty"`
}

func (x *ProcessRefundResponse) Reset() {
	*x = ProcessRefundResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessRefundResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessRefundResponse) ProtoMessage() {}

func (x *ProcessRefundResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessRefundResponse.ProtoReflect.Descriptor instead.
func (*ProcessRefundResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{9}
}

func (x *ProcessRefundResponse) GetRecharge() *Recharge {
	if x != nil {
		return x.Recharge
	}
	return nil
}

type GetRechargeStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     *uint32 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	DealerUuid string  `protobuf:"bytes,2,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	StartDate  string  `protobuf:"bytes,3,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	EndDate    string  `protobuf:"bytes,4,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
}

func (x *GetRechargeStatisticsRequest) Reset() {
	*x = GetRechargeStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRechargeStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRechargeStatisticsRequest) ProtoMessage() {}

func (x *GetRechargeStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRechargeStatisticsRequest.ProtoReflect.Descriptor instead.
func (*GetRechargeStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{10}
}

func (x *GetRechargeStatisticsRequest) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *GetRechargeStatisticsRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *GetRechargeStatisticsRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetRechargeStatisticsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GetRechargeStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statistics *RechargeStatistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (x *GetRechargeStatisticsResponse) Reset() {
	*x = GetRechargeStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRechargeStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRechargeStatisticsResponse) ProtoMessage() {}

func (x *GetRechargeStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRechargeStatisticsResponse.ProtoReflect.Descriptor instead.
func (*GetRechargeStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{11}
}

func (x *GetRechargeStatisticsResponse) GetStatistics() *RechargeStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

// Profit Sharing Messages
type CreateProfitSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid     string                 `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	UserId         uint32                 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SourceType     ProfitSharingType      `protobuf:"varint,3,opt,name=source_type,json=sourceType,proto3,enum=financial.ProfitSharingType" json:"source_type,omitempty"`
	SourceId       uint32                 `protobuf:"varint,4,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceAmount   float64                `protobuf:"fixed64,5,opt,name=source_amount,json=sourceAmount,proto3" json:"source_amount,omitempty"`
	CommissionRate float64                `protobuf:"fixed64,6,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
	PeriodStart    *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	Notes          string                 `protobuf:"bytes,9,opt,name=notes,proto3" json:"notes,omitempty"`
	TenantId       string                 `protobuf:"bytes,10,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *CreateProfitSharingRequest) Reset() {
	*x = CreateProfitSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfitSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfitSharingRequest) ProtoMessage() {}

func (x *CreateProfitSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfitSharingRequest.ProtoReflect.Descriptor instead.
func (*CreateProfitSharingRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{12}
}

func (x *CreateProfitSharingRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *CreateProfitSharingRequest) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateProfitSharingRequest) GetSourceType() ProfitSharingType {
	if x != nil {
		return x.SourceType
	}
	return ProfitSharingType_PROFIT_SHARING_TYPE_RECHARGE
}

func (x *CreateProfitSharingRequest) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *CreateProfitSharingRequest) GetSourceAmount() float64 {
	if x != nil {
		return x.SourceAmount
	}
	return 0
}

func (x *CreateProfitSharingRequest) GetCommissionRate() float64 {
	if x != nil {
		return x.CommissionRate
	}
	return 0
}

func (x *CreateProfitSharingRequest) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *CreateProfitSharingRequest) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *CreateProfitSharingRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *CreateProfitSharingRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type CreateProfitSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *CreateProfitSharingResponse) Reset() {
	*x = CreateProfitSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateProfitSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProfitSharingResponse) ProtoMessage() {}

func (x *CreateProfitSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProfitSharingResponse.ProtoReflect.Descriptor instead.
func (*CreateProfitSharingResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{13}
}

func (x *CreateProfitSharingResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

type GetProfitSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetProfitSharingRequest) Reset() {
	*x = GetProfitSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfitSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfitSharingRequest) ProtoMessage() {}

func (x *GetProfitSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfitSharingRequest.ProtoReflect.Descriptor instead.
func (*GetProfitSharingRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{14}
}

func (x *GetProfitSharingRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetProfitSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *GetProfitSharingResponse) Reset() {
	*x = GetProfitSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProfitSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProfitSharingResponse) ProtoMessage() {}

func (x *GetProfitSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProfitSharingResponse.ProtoReflect.Descriptor instead.
func (*GetProfitSharingResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{15}
}

func (x *GetProfitSharingResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

type UpdateProfitSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid           string               `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Status         *ProfitSharingStatus `protobuf:"varint,2,opt,name=status,proto3,enum=financial.ProfitSharingStatus,oneof" json:"status,omitempty"`
	CommissionRate *float64             `protobuf:"fixed64,3,opt,name=commission_rate,json=commissionRate,proto3,oneof" json:"commission_rate,omitempty"`
	Notes          *string              `protobuf:"bytes,4,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
	UpdatedBy      uint32               `protobuf:"varint,5,opt,name=updated_by,json=updatedBy,proto3" json:"updated_by,omitempty"`
}

func (x *UpdateProfitSharingRequest) Reset() {
	*x = UpdateProfitSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfitSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfitSharingRequest) ProtoMessage() {}

func (x *UpdateProfitSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfitSharingRequest.ProtoReflect.Descriptor instead.
func (*UpdateProfitSharingRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateProfitSharingRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateProfitSharingRequest) GetStatus() ProfitSharingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ProfitSharingStatus_PROFIT_SHARING_STATUS_PENDING
}

func (x *UpdateProfitSharingRequest) GetCommissionRate() float64 {
	if x != nil && x.CommissionRate != nil {
		return *x.CommissionRate
	}
	return 0
}

func (x *UpdateProfitSharingRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

func (x *UpdateProfitSharingRequest) GetUpdatedBy() uint32 {
	if x != nil {
		return x.UpdatedBy
	}
	return 0
}

type UpdateProfitSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *UpdateProfitSharingResponse) Reset() {
	*x = UpdateProfitSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateProfitSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProfitSharingResponse) ProtoMessage() {}

func (x *UpdateProfitSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProfitSharingResponse.ProtoReflect.Descriptor instead.
func (*UpdateProfitSharingResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{17}
}

func (x *UpdateProfitSharingResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

type ListProfitSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32                  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	DealerUuid string                 `protobuf:"bytes,3,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	UserId     *uint32                `protobuf:"varint,4,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	Status     *ProfitSharingStatus   `protobuf:"varint,5,opt,name=status,proto3,enum=financial.ProfitSharingStatus,oneof" json:"status,omitempty"`
	SourceType *ProfitSharingType     `protobuf:"varint,6,opt,name=source_type,json=sourceType,proto3,enum=financial.ProfitSharingType,oneof" json:"source_type,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
	SortBy     string                 `protobuf:"bytes,9,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder  string                 `protobuf:"bytes,10,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
}

func (x *ListProfitSharingRequest) Reset() {
	*x = ListProfitSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfitSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfitSharingRequest) ProtoMessage() {}

func (x *ListProfitSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfitSharingRequest.ProtoReflect.Descriptor instead.
func (*ListProfitSharingRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{18}
}

func (x *ListProfitSharingRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProfitSharingRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProfitSharingRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *ListProfitSharingRequest) GetUserId() uint32 {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return 0
}

func (x *ListProfitSharingRequest) GetStatus() ProfitSharingStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ProfitSharingStatus_PROFIT_SHARING_STATUS_PENDING
}

func (x *ListProfitSharingRequest) GetSourceType() ProfitSharingType {
	if x != nil && x.SourceType != nil {
		return *x.SourceType
	}
	return ProfitSharingType_PROFIT_SHARING_TYPE_RECHARGE
}

func (x *ListProfitSharingRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListProfitSharingRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

func (x *ListProfitSharingRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListProfitSharingRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

type ListProfitSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data       []*ProfitSharing `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
	Total      int64            `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page       int32            `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PageSize   int32            `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	TotalPages int32            `protobuf:"varint,5,opt,name=total_pages,json=totalPages,proto3" json:"total_pages,omitempty"`
}

func (x *ListProfitSharingResponse) Reset() {
	*x = ListProfitSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProfitSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProfitSharingResponse) ProtoMessage() {}

func (x *ListProfitSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProfitSharingResponse.ProtoReflect.Descriptor instead.
func (*ListProfitSharingResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{19}
}

func (x *ListProfitSharingResponse) GetData() []*ProfitSharing {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ListProfitSharingResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListProfitSharingResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListProfitSharingResponse) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProfitSharingResponse) GetTotalPages() int32 {
	if x != nil {
		return x.TotalPages
	}
	return 0
}

type CalculateProfitSharingForRechargeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RechargeUuid   string  `protobuf:"bytes,1,opt,name=recharge_uuid,json=rechargeUuid,proto3" json:"recharge_uuid,omitempty"`
	DealerUuid     string  `protobuf:"bytes,2,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	CommissionRate float64 `protobuf:"fixed64,3,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
}

func (x *CalculateProfitSharingForRechargeRequest) Reset() {
	*x = CalculateProfitSharingForRechargeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateProfitSharingForRechargeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateProfitSharingForRechargeRequest) ProtoMessage() {}

func (x *CalculateProfitSharingForRechargeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateProfitSharingForRechargeRequest.ProtoReflect.Descriptor instead.
func (*CalculateProfitSharingForRechargeRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{20}
}

func (x *CalculateProfitSharingForRechargeRequest) GetRechargeUuid() string {
	if x != nil {
		return x.RechargeUuid
	}
	return ""
}

func (x *CalculateProfitSharingForRechargeRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *CalculateProfitSharingForRechargeRequest) GetCommissionRate() float64 {
	if x != nil {
		return x.CommissionRate
	}
	return 0
}

type CalculateProfitSharingForRechargeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *CalculateProfitSharingForRechargeResponse) Reset() {
	*x = CalculateProfitSharingForRechargeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalculateProfitSharingForRechargeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateProfitSharingForRechargeResponse) ProtoMessage() {}

func (x *CalculateProfitSharingForRechargeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateProfitSharingForRechargeResponse.ProtoReflect.Descriptor instead.
func (*CalculateProfitSharingForRechargeResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{21}
}

func (x *CalculateProfitSharingForRechargeResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

type MarkProfitSharingAsPaidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	PaymentMethod string `protobuf:"bytes,2,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	PaymentRef    string `protobuf:"bytes,3,opt,name=payment_ref,json=paymentRef,proto3" json:"payment_ref,omitempty"`
}

func (x *MarkProfitSharingAsPaidRequest) Reset() {
	*x = MarkProfitSharingAsPaidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkProfitSharingAsPaidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkProfitSharingAsPaidRequest) ProtoMessage() {}

func (x *MarkProfitSharingAsPaidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkProfitSharingAsPaidRequest.ProtoReflect.Descriptor instead.
func (*MarkProfitSharingAsPaidRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{22}
}

func (x *MarkProfitSharingAsPaidRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *MarkProfitSharingAsPaidRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *MarkProfitSharingAsPaidRequest) GetPaymentRef() string {
	if x != nil {
		return x.PaymentRef
	}
	return ""
}

type MarkProfitSharingAsPaidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *MarkProfitSharingAsPaidResponse) Reset() {
	*x = MarkProfitSharingAsPaidResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkProfitSharingAsPaidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkProfitSharingAsPaidResponse) ProtoMessage() {}

func (x *MarkProfitSharingAsPaidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkProfitSharingAsPaidResponse.ProtoReflect.Descriptor instead.
func (*MarkProfitSharingAsPaidResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{23}
}

func (x *MarkProfitSharingAsPaidResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

type CancelProfitSharingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid   string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Reason string `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *CancelProfitSharingRequest) Reset() {
	*x = CancelProfitSharingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelProfitSharingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelProfitSharingRequest) ProtoMessage() {}

func (x *CancelProfitSharingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelProfitSharingRequest.ProtoReflect.Descriptor instead.
func (*CancelProfitSharingRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{24}
}

func (x *CancelProfitSharingRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *CancelProfitSharingRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type CancelProfitSharingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfitSharing *ProfitSharing `protobuf:"bytes,1,opt,name=profit_sharing,json=profitSharing,proto3" json:"profit_sharing,omitempty"`
}

func (x *CancelProfitSharingResponse) Reset() {
	*x = CancelProfitSharingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancelProfitSharingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancelProfitSharingResponse) ProtoMessage() {}

func (x *CancelProfitSharingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancelProfitSharingResponse.ProtoReflect.Descriptor instead.
func (*CancelProfitSharingResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{25}
}

func (x *CancelProfitSharingResponse) GetProfitSharing() *ProfitSharing {
	if x != nil {
		return x.ProfitSharing
	}
	return nil
}

// Financial Statement Messages
type GenerateFinancialStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid  string                 `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	PeriodStart *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	Notes       string                 `protobuf:"bytes,4,opt,name=notes,proto3" json:"notes,omitempty"`
	TenantId    string                 `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *GenerateFinancialStatementRequest) Reset() {
	*x = GenerateFinancialStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFinancialStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFinancialStatementRequest) ProtoMessage() {}

func (x *GenerateFinancialStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFinancialStatementRequest.ProtoReflect.Descriptor instead.
func (*GenerateFinancialStatementRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{26}
}

func (x *GenerateFinancialStatementRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *GenerateFinancialStatementRequest) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *GenerateFinancialStatementRequest) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *GenerateFinancialStatementRequest) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *GenerateFinancialStatementRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type GenerateFinancialStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *FinancialStatement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *GenerateFinancialStatementResponse) Reset() {
	*x = GenerateFinancialStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateFinancialStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateFinancialStatementResponse) ProtoMessage() {}

func (x *GenerateFinancialStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateFinancialStatementResponse.ProtoReflect.Descriptor instead.
func (*GenerateFinancialStatementResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{27}
}

func (x *GenerateFinancialStatementResponse) GetStatement() *FinancialStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type GetFinancialStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *GetFinancialStatementRequest) Reset() {
	*x = GetFinancialStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialStatementRequest) ProtoMessage() {}

func (x *GetFinancialStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialStatementRequest.ProtoReflect.Descriptor instead.
func (*GetFinancialStatementRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{28}
}

func (x *GetFinancialStatementRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type GetFinancialStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *FinancialStatement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *GetFinancialStatementResponse) Reset() {
	*x = GetFinancialStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFinancialStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFinancialStatementResponse) ProtoMessage() {}

func (x *GetFinancialStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFinancialStatementResponse.ProtoReflect.Descriptor instead.
func (*GetFinancialStatementResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{29}
}

func (x *GetFinancialStatementResponse) GetStatement() *FinancialStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type ApproveFinancialStatementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid       string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	ApprovedBy uint32 `protobuf:"varint,2,opt,name=approved_by,json=approvedBy,proto3" json:"approved_by,omitempty"`
}

func (x *ApproveFinancialStatementRequest) Reset() {
	*x = ApproveFinancialStatementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveFinancialStatementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveFinancialStatementRequest) ProtoMessage() {}

func (x *ApproveFinancialStatementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveFinancialStatementRequest.ProtoReflect.Descriptor instead.
func (*ApproveFinancialStatementRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{30}
}

func (x *ApproveFinancialStatementRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ApproveFinancialStatementRequest) GetApprovedBy() uint32 {
	if x != nil {
		return x.ApprovedBy
	}
	return 0
}

type ApproveFinancialStatementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statement *FinancialStatement `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
}

func (x *ApproveFinancialStatementResponse) Reset() {
	*x = ApproveFinancialStatementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveFinancialStatementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveFinancialStatementResponse) ProtoMessage() {}

func (x *ApproveFinancialStatementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveFinancialStatementResponse.ProtoReflect.Descriptor instead.
func (*ApproveFinancialStatementResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{31}
}

func (x *ApproveFinancialStatementResponse) GetStatement() *FinancialStatement {
	if x != nil {
		return x.Statement
	}
	return nil
}

type ListFinancialStatementsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page       int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	SortBy     string                 `protobuf:"bytes,3,opt,name=sort_by,json=sortBy,proto3" json:"sort_by,omitempty"`
	SortOrder  string                 `protobuf:"bytes,4,opt,name=sort_order,json=sortOrder,proto3" json:"sort_order,omitempty"`
	DealerUuid string                 `protobuf:"bytes,5,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	Status     string                 `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	StartDate  *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3,oneof" json:"start_date,omitempty"`
	EndDate    *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=end_date,json=endDate,proto3,oneof" json:"end_date,omitempty"`
}

func (x *ListFinancialStatementsRequest) Reset() {
	*x = ListFinancialStatementsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFinancialStatementsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFinancialStatementsRequest) ProtoMessage() {}

func (x *ListFinancialStatementsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFinancialStatementsRequest.ProtoReflect.Descriptor instead.
func (*ListFinancialStatementsRequest) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{32}
}

func (x *ListFinancialStatementsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFinancialStatementsRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListFinancialStatementsRequest) GetSortBy() string {
	if x != nil {
		return x.SortBy
	}
	return ""
}

func (x *ListFinancialStatementsRequest) GetSortOrder() string {
	if x != nil {
		return x.SortOrder
	}
	return ""
}

func (x *ListFinancialStatementsRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *ListFinancialStatementsRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ListFinancialStatementsRequest) GetStartDate() *timestamppb.Timestamp {
	if x != nil {
		return x.StartDate
	}
	return nil
}

func (x *ListFinancialStatementsRequest) GetEndDate() *timestamppb.Timestamp {
	if x != nil {
		return x.EndDate
	}
	return nil
}

type ListFinancialStatementsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Statements []*FinancialStatement `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	Total      int64                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Page       int32                 `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit      int32                 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *ListFinancialStatementsResponse) Reset() {
	*x = ListFinancialStatementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFinancialStatementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFinancialStatementsResponse) ProtoMessage() {}

func (x *ListFinancialStatementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFinancialStatementsResponse.ProtoReflect.Descriptor instead.
func (*ListFinancialStatementsResponse) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{33}
}

func (x *ListFinancialStatementsResponse) GetStatements() []*FinancialStatement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *ListFinancialStatementsResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListFinancialStatementsResponse) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFinancialStatementsResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Data Models
type Recharge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid            string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	UserId          uint32                 `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TenantId        string                 `protobuf:"bytes,6,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	DealerUuid      string                 `protobuf:"bytes,7,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	Amount          float64                `protobuf:"fixed64,8,opt,name=amount,proto3" json:"amount,omitempty"`
	Currency        string                 `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	Type            RechargeType           `protobuf:"varint,10,opt,name=type,proto3,enum=financial.RechargeType" json:"type,omitempty"`
	Status          RechargeStatus         `protobuf:"varint,11,opt,name=status,proto3,enum=financial.RechargeStatus" json:"status,omitempty"`
	PaymentMethod   PaymentMethod          `protobuf:"varint,12,opt,name=payment_method,json=paymentMethod,proto3,enum=financial.PaymentMethod" json:"payment_method,omitempty"`
	PaymentId       string                 `protobuf:"bytes,13,opt,name=payment_id,json=paymentId,proto3" json:"payment_id,omitempty"`
	PaymentUrl      string                 `protobuf:"bytes,14,opt,name=payment_url,json=paymentUrl,proto3" json:"payment_url,omitempty"`
	StorageAmount   float64                `protobuf:"fixed64,15,opt,name=storage_amount,json=storageAmount,proto3" json:"storage_amount,omitempty"`
	StorageDuration int32                  `protobuf:"varint,16,opt,name=storage_duration,json=storageDuration,proto3" json:"storage_duration,omitempty"`
	ProcessedAt     *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=processed_at,json=processedAt,proto3,oneof" json:"processed_at,omitempty"`
	CompletedAt     *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=completed_at,json=completedAt,proto3,oneof" json:"completed_at,omitempty"`
	FailedAt        *timestamppb.Timestamp `protobuf:"bytes,19,opt,name=failed_at,json=failedAt,proto3,oneof" json:"failed_at,omitempty"`
	FailedReason    string                 `protobuf:"bytes,20,opt,name=failed_reason,json=failedReason,proto3" json:"failed_reason,omitempty"`
	RefundedAt      *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=refunded_at,json=refundedAt,proto3,oneof" json:"refunded_at,omitempty"`
	RefundAmount    float64                `protobuf:"fixed64,22,opt,name=refund_amount,json=refundAmount,proto3" json:"refund_amount,omitempty"`
	RefundReason    string                 `protobuf:"bytes,23,opt,name=refund_reason,json=refundReason,proto3" json:"refund_reason,omitempty"`
	Description     string                 `protobuf:"bytes,24,opt,name=description,proto3" json:"description,omitempty"`
	IpAddress       string                 `protobuf:"bytes,25,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	UserAgent       string                 `protobuf:"bytes,26,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	CreatedBy       uint32                 `protobuf:"varint,27,opt,name=created_by,json=createdBy,proto3" json:"created_by,omitempty"`
	UpdatedBy       *uint32                `protobuf:"varint,28,opt,name=updated_by,json=updatedBy,proto3,oneof" json:"updated_by,omitempty"`
}

func (x *Recharge) Reset() {
	*x = Recharge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recharge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recharge) ProtoMessage() {}

func (x *Recharge) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recharge.ProtoReflect.Descriptor instead.
func (*Recharge) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{34}
}

func (x *Recharge) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Recharge) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Recharge) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Recharge) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Recharge) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Recharge) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Recharge) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *Recharge) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Recharge) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *Recharge) GetType() RechargeType {
	if x != nil {
		return x.Type
	}
	return RechargeType_RECHARGE_TYPE_STORAGE
}

func (x *Recharge) GetStatus() RechargeStatus {
	if x != nil {
		return x.Status
	}
	return RechargeStatus_RECHARGE_STATUS_PENDING
}

func (x *Recharge) GetPaymentMethod() PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return PaymentMethod_PAYMENT_METHOD_ALIPAY
}

func (x *Recharge) GetPaymentId() string {
	if x != nil {
		return x.PaymentId
	}
	return ""
}

func (x *Recharge) GetPaymentUrl() string {
	if x != nil {
		return x.PaymentUrl
	}
	return ""
}

func (x *Recharge) GetStorageAmount() float64 {
	if x != nil {
		return x.StorageAmount
	}
	return 0
}

func (x *Recharge) GetStorageDuration() int32 {
	if x != nil {
		return x.StorageDuration
	}
	return 0
}

func (x *Recharge) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *Recharge) GetCompletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CompletedAt
	}
	return nil
}

func (x *Recharge) GetFailedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FailedAt
	}
	return nil
}

func (x *Recharge) GetFailedReason() string {
	if x != nil {
		return x.FailedReason
	}
	return ""
}

func (x *Recharge) GetRefundedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RefundedAt
	}
	return nil
}

func (x *Recharge) GetRefundAmount() float64 {
	if x != nil {
		return x.RefundAmount
	}
	return 0
}

func (x *Recharge) GetRefundReason() string {
	if x != nil {
		return x.RefundReason
	}
	return ""
}

func (x *Recharge) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Recharge) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *Recharge) GetUserAgent() string {
	if x != nil {
		return x.UserAgent
	}
	return ""
}

func (x *Recharge) GetCreatedBy() uint32 {
	if x != nil {
		return x.CreatedBy
	}
	return 0
}

func (x *Recharge) GetUpdatedBy() uint32 {
	if x != nil && x.UpdatedBy != nil {
		return *x.UpdatedBy
	}
	return 0
}

type ProfitSharing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid             string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TenantId         string                 `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	DealerUuid       string                 `protobuf:"bytes,6,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	DealerName       string                 `protobuf:"bytes,7,opt,name=dealer_name,json=dealerName,proto3" json:"dealer_name,omitempty"`
	UserId           uint32                 `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	UserName         string                 `protobuf:"bytes,9,opt,name=user_name,json=userName,proto3" json:"user_name,omitempty"`
	SourceType       ProfitSharingType      `protobuf:"varint,10,opt,name=source_type,json=sourceType,proto3,enum=financial.ProfitSharingType" json:"source_type,omitempty"`
	SourceId         uint32                 `protobuf:"varint,11,opt,name=source_id,json=sourceId,proto3" json:"source_id,omitempty"`
	SourceAmount     float64                `protobuf:"fixed64,12,opt,name=source_amount,json=sourceAmount,proto3" json:"source_amount,omitempty"`
	CommissionRate   float64                `protobuf:"fixed64,13,opt,name=commission_rate,json=commissionRate,proto3" json:"commission_rate,omitempty"`
	CommissionAmount float64                `protobuf:"fixed64,14,opt,name=commission_amount,json=commissionAmount,proto3" json:"commission_amount,omitempty"`
	NetAmount        float64                `protobuf:"fixed64,15,opt,name=net_amount,json=netAmount,proto3" json:"net_amount,omitempty"`
	CalculationDate  *timestamppb.Timestamp `protobuf:"bytes,16,opt,name=calculation_date,json=calculationDate,proto3" json:"calculation_date,omitempty"`
	PeriodStart      *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	Status           ProfitSharingStatus    `protobuf:"varint,19,opt,name=status,proto3,enum=financial.ProfitSharingStatus" json:"status,omitempty"`
	ProcessedAt      *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=processed_at,json=processedAt,proto3,oneof" json:"processed_at,omitempty"`
	ProcessedBy      *uint32                `protobuf:"varint,21,opt,name=processed_by,json=processedBy,proto3,oneof" json:"processed_by,omitempty"`
	PaymentDate      *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=payment_date,json=paymentDate,proto3,oneof" json:"payment_date,omitempty"`
	PaymentMethod    string                 `protobuf:"bytes,23,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	PaymentRef       string                 `protobuf:"bytes,24,opt,name=payment_ref,json=paymentRef,proto3" json:"payment_ref,omitempty"`
	Notes            string                 `protobuf:"bytes,25,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *ProfitSharing) Reset() {
	*x = ProfitSharing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitSharing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitSharing) ProtoMessage() {}

func (x *ProfitSharing) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitSharing.ProtoReflect.Descriptor instead.
func (*ProfitSharing) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{35}
}

func (x *ProfitSharing) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfitSharing) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ProfitSharing) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ProfitSharing) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ProfitSharing) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ProfitSharing) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *ProfitSharing) GetDealerName() string {
	if x != nil {
		return x.DealerName
	}
	return ""
}

func (x *ProfitSharing) GetUserId() uint32 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProfitSharing) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProfitSharing) GetSourceType() ProfitSharingType {
	if x != nil {
		return x.SourceType
	}
	return ProfitSharingType_PROFIT_SHARING_TYPE_RECHARGE
}

func (x *ProfitSharing) GetSourceId() uint32 {
	if x != nil {
		return x.SourceId
	}
	return 0
}

func (x *ProfitSharing) GetSourceAmount() float64 {
	if x != nil {
		return x.SourceAmount
	}
	return 0
}

func (x *ProfitSharing) GetCommissionRate() float64 {
	if x != nil {
		return x.CommissionRate
	}
	return 0
}

func (x *ProfitSharing) GetCommissionAmount() float64 {
	if x != nil {
		return x.CommissionAmount
	}
	return 0
}

func (x *ProfitSharing) GetNetAmount() float64 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *ProfitSharing) GetCalculationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.CalculationDate
	}
	return nil
}

func (x *ProfitSharing) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *ProfitSharing) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *ProfitSharing) GetStatus() ProfitSharingStatus {
	if x != nil {
		return x.Status
	}
	return ProfitSharingStatus_PROFIT_SHARING_STATUS_PENDING
}

func (x *ProfitSharing) GetProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ProcessedAt
	}
	return nil
}

func (x *ProfitSharing) GetProcessedBy() uint32 {
	if x != nil && x.ProcessedBy != nil {
		return *x.ProcessedBy
	}
	return 0
}

func (x *ProfitSharing) GetPaymentDate() *timestamppb.Timestamp {
	if x != nil {
		return x.PaymentDate
	}
	return nil
}

func (x *ProfitSharing) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *ProfitSharing) GetPaymentRef() string {
	if x != nil {
		return x.PaymentRef
	}
	return ""
}

func (x *ProfitSharing) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type FinancialStatement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid              string                 `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	CreatedAt         *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt         *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TenantId          string                 `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	DealerUuid        string                 `protobuf:"bytes,6,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	DealerName        string                 `protobuf:"bytes,7,opt,name=dealer_name,json=dealerName,proto3" json:"dealer_name,omitempty"`
	PeriodStart       *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=period_start,json=periodStart,proto3" json:"period_start,omitempty"`
	PeriodEnd         *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=period_end,json=periodEnd,proto3" json:"period_end,omitempty"`
	TotalRevenue      float64                `protobuf:"fixed64,10,opt,name=total_revenue,json=totalRevenue,proto3" json:"total_revenue,omitempty"`
	TotalCommission   float64                `protobuf:"fixed64,11,opt,name=total_commission,json=totalCommission,proto3" json:"total_commission,omitempty"`
	NetRevenue        float64                `protobuf:"fixed64,12,opt,name=net_revenue,json=netRevenue,proto3" json:"net_revenue,omitempty"`
	TotalRecharges    int64                  `protobuf:"varint,13,opt,name=total_recharges,json=totalRecharges,proto3" json:"total_recharges,omitempty"`
	PendingCommission float64                `protobuf:"fixed64,14,opt,name=pending_commission,json=pendingCommission,proto3" json:"pending_commission,omitempty"`
	PaidCommission    float64                `protobuf:"fixed64,15,opt,name=paid_commission,json=paidCommission,proto3" json:"paid_commission,omitempty"`
	Status            string                 `protobuf:"bytes,16,opt,name=status,proto3" json:"status,omitempty"`
	GeneratedAt       *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=generated_at,json=generatedAt,proto3" json:"generated_at,omitempty"`
	ApprovedAt        *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=approved_at,json=approvedAt,proto3,oneof" json:"approved_at,omitempty"`
	ApprovedBy        *uint32                `protobuf:"varint,19,opt,name=approved_by,json=approvedBy,proto3,oneof" json:"approved_by,omitempty"`
	Notes             string                 `protobuf:"bytes,20,opt,name=notes,proto3" json:"notes,omitempty"`
}

func (x *FinancialStatement) Reset() {
	*x = FinancialStatement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinancialStatement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinancialStatement) ProtoMessage() {}

func (x *FinancialStatement) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinancialStatement.ProtoReflect.Descriptor instead.
func (*FinancialStatement) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{36}
}

func (x *FinancialStatement) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FinancialStatement) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *FinancialStatement) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *FinancialStatement) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *FinancialStatement) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *FinancialStatement) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *FinancialStatement) GetDealerName() string {
	if x != nil {
		return x.DealerName
	}
	return ""
}

func (x *FinancialStatement) GetPeriodStart() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodStart
	}
	return nil
}

func (x *FinancialStatement) GetPeriodEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.PeriodEnd
	}
	return nil
}

func (x *FinancialStatement) GetTotalRevenue() float64 {
	if x != nil {
		return x.TotalRevenue
	}
	return 0
}

func (x *FinancialStatement) GetTotalCommission() float64 {
	if x != nil {
		return x.TotalCommission
	}
	return 0
}

func (x *FinancialStatement) GetNetRevenue() float64 {
	if x != nil {
		return x.NetRevenue
	}
	return 0
}

func (x *FinancialStatement) GetTotalRecharges() int64 {
	if x != nil {
		return x.TotalRecharges
	}
	return 0
}

func (x *FinancialStatement) GetPendingCommission() float64 {
	if x != nil {
		return x.PendingCommission
	}
	return 0
}

func (x *FinancialStatement) GetPaidCommission() float64 {
	if x != nil {
		return x.PaidCommission
	}
	return 0
}

func (x *FinancialStatement) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *FinancialStatement) GetGeneratedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GeneratedAt
	}
	return nil
}

func (x *FinancialStatement) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *FinancialStatement) GetApprovedBy() uint32 {
	if x != nil && x.ApprovedBy != nil {
		return *x.ApprovedBy
	}
	return 0
}

func (x *FinancialStatement) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

type RechargeStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalRecharges     int64   `protobuf:"varint,1,opt,name=total_recharges,json=totalRecharges,proto3" json:"total_recharges,omitempty"`
	TotalAmount        float64 `protobuf:"fixed64,2,opt,name=total_amount,json=totalAmount,proto3" json:"total_amount,omitempty"`
	CompletedRecharges int64   `protobuf:"varint,3,opt,name=completed_recharges,json=completedRecharges,proto3" json:"completed_recharges,omitempty"`
	CompletedAmount    float64 `protobuf:"fixed64,4,opt,name=completed_amount,json=completedAmount,proto3" json:"completed_amount,omitempty"`
	PendingRecharges   int64   `protobuf:"varint,5,opt,name=pending_recharges,json=pendingRecharges,proto3" json:"pending_recharges,omitempty"`
	FailedRecharges    int64   `protobuf:"varint,6,opt,name=failed_recharges,json=failedRecharges,proto3" json:"failed_recharges,omitempty"`
	RefundedRecharges  int64   `protobuf:"varint,7,opt,name=refunded_recharges,json=refundedRecharges,proto3" json:"refunded_recharges,omitempty"`
	RefundedAmount     float64 `protobuf:"fixed64,8,opt,name=refunded_amount,json=refundedAmount,proto3" json:"refunded_amount,omitempty"`
	AverageAmount      float64 `protobuf:"fixed64,9,opt,name=average_amount,json=averageAmount,proto3" json:"average_amount,omitempty"`
	SuccessRate        float64 `protobuf:"fixed64,10,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`
}

func (x *RechargeStatistics) Reset() {
	*x = RechargeStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_financial_financial_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RechargeStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RechargeStatistics) ProtoMessage() {}

func (x *RechargeStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_financial_financial_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RechargeStatistics.ProtoReflect.Descriptor instead.
func (*RechargeStatistics) Descriptor() ([]byte, []int) {
	return file_financial_financial_proto_rawDescGZIP(), []int{37}
}

func (x *RechargeStatistics) GetTotalRecharges() int64 {
	if x != nil {
		return x.TotalRecharges
	}
	return 0
}

func (x *RechargeStatistics) GetTotalAmount() float64 {
	if x != nil {
		return x.TotalAmount
	}
	return 0
}

func (x *RechargeStatistics) GetCompletedRecharges() int64 {
	if x != nil {
		return x.CompletedRecharges
	}
	return 0
}

func (x *RechargeStatistics) GetCompletedAmount() float64 {
	if x != nil {
		return x.CompletedAmount
	}
	return 0
}

func (x *RechargeStatistics) GetPendingRecharges() int64 {
	if x != nil {
		return x.PendingRecharges
	}
	return 0
}

func (x *RechargeStatistics) GetFailedRecharges() int64 {
	if x != nil {
		return x.FailedRecharges
	}
	return 0
}

func (x *RechargeStatistics) GetRefundedRecharges() int64 {
	if x != nil {
		return x.RefundedRecharges
	}
	return 0
}

func (x *RechargeStatistics) GetRefundedAmount() float64 {
	if x != nil {
		return x.RefundedAmount
	}
	return 0
}

func (x *RechargeStatistics) GetAverageAmount() float64 {
	if x != nil {
		return x.AverageAmount
	}
	return 0
}

func (x *RechargeStatistics) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

var File_financial_financial_proto protoreflect.FileDescriptor

var file_financial_financial_proto_rawDesc = []byte{
	0x0a, 0x19, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2f, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x03, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x22, 0x49, 0x0a, 0x16,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x22, 0x46, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x22, 0xaa, 0x03, 0x0a, 0x15, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a,
	0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x49, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x22, 0xec, 0x03, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x48, 0x03, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x0a, 0x0a,
	0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x22, 0x8a, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x52, 0x09, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x97, 0x01,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x62, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x22, 0x48, 0x0a, 0x15, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x08, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x22, 0xa3, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x22, 0x5e, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0xad, 0x03, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5e, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x2d, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5b, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xfe, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x01, 0x52, 0x0e,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0x5e, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x73, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x22, 0x82, 0x04, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42,
	0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x48, 0x02, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x04, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17,
	0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x6f, 0x72,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xb1, 0x01, 0x0a, 0x19, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x61, 0x67, 0x65, 0x73, 0x22, 0x99, 0x01,
	0x0a, 0x28, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x22, 0x6c, 0x0a, 0x29, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7c, 0x0a, 0x1e, 0x4d, 0x61, 0x72, 0x6b, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x50, 0x61,
	0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x66, 0x22, 0x62, 0x0a, 0x1f, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x50, 0x61, 0x69, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x48, 0x0a, 0x1a, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x5e, 0x0a, 0x1b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x73, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72,
	0x69, 0x6e, 0x67, 0x22, 0xf1, 0x01, 0x0a, 0x21, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x61, 0x0a, 0x22, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x32, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0x5c,
	0x0a, 0x1d, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x57, 0x0a, 0x20,
	0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x42, 0x79, 0x22, 0x60, 0x0a, 0x21, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xd3, 0x02, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x62, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x72, 0x74, 0x42, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0xa0, 0x01,
	0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x2e, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x22, 0xcb, 0x09, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x17, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3c, 0x0a,
	0x09, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x08,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x22, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x04, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x22, 0xee,
	0x08, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6e, 0x65, 0x74, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x0c,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f,
	0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0c, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0b,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0f, 0x0a,
	0x0d, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x42, 0x0f,
	0x0a, 0x0d, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22,
	0xee, 0x06, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x0c, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x39,
	0x0a, 0x0a, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x45, 0x6e, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x29,
	0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x6e, 0x65, 0x74, 0x52, 0x65, 0x76, 0x65, 0x6e, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x69,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x22, 0xb6, 0x03, 0x0a, 0x12, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x52, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x2b, 0x0a, 0x11, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x75, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x61, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x2a, 0xc5, 0x01, 0x0a, 0x0e, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x17,
	0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x4f,
	0x43, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x4d,
	0x50, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x45, 0x43, 0x48,
	0x41, 0x52, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c,
	0x45, 0x44, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x45, 0x44, 0x10,
	0x05, 0x2a, 0xba, 0x01, 0x0a, 0x0d, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d,
	0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x41, 0x4c, 0x49, 0x50, 0x41, 0x59, 0x10, 0x00, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44,
	0x5f, 0x57, 0x45, 0x43, 0x48, 0x41, 0x54, 0x50, 0x41, 0x59, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x42,
	0x41, 0x4e, 0x4b, 0x43, 0x41, 0x52, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x50, 0x41, 0x59, 0x50,
	0x41, 0x4c, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x50, 0x45, 0x10, 0x04, 0x12,
	0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f,
	0x44, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x49, 0x54, 0x43, 0x41, 0x52, 0x44, 0x10, 0x05, 0x2a, 0x5f,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x15, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43,
	0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x43, 0x4b, 0x41, 0x47, 0x45, 0x10, 0x02, 0x2a,
	0xa3, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x52, 0x4f, 0x46, 0x49,
	0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x52,
	0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4c, 0x43, 0x55, 0x4c, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x41, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x9d, 0x01, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74,
	0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x50,
	0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53, 0x48,
	0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41,
	0x47, 0x45, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x52, 0x4f, 0x46, 0x49, 0x54, 0x5f, 0x53,
	0x48, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x10, 0x03, 0x32, 0xe5, 0x0d, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x12, 0x1d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x55, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x12, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0d, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x66,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63,
	0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53,
	0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x8e, 0x01, 0x0a, 0x21, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x33, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x72, 0x52,
	0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x75,
	0x6c, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x50, 0x61, 0x69, 0x64, 0x12,
	0x29, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x50,
	0x61, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x50, 0x61, 0x69, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x1a,
	0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x2e, 0x66, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46,
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e,
	0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6e,
	0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x27, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x66, 0x69, 0x6e, 0x61,
	0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x76, 0x0a, 0x19, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x46, 0x69,
	0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x2b, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x65, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x17, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2a, 0x2e, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x33, 0x5a,
	0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x61,
	0x69, 0x72, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x61, 0x6d, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x66, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69,
	0x61, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_financial_financial_proto_rawDescOnce sync.Once
	file_financial_financial_proto_rawDescData = file_financial_financial_proto_rawDesc
)

func file_financial_financial_proto_rawDescGZIP() []byte {
	file_financial_financial_proto_rawDescOnce.Do(func() {
		file_financial_financial_proto_rawDescData = protoimpl.X.CompressGZIP(file_financial_financial_proto_rawDescData)
	})
	return file_financial_financial_proto_rawDescData
}

var file_financial_financial_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_financial_financial_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_financial_financial_proto_goTypes = []any{
	(RechargeStatus)(0),                               // 0: financial.RechargeStatus
	(PaymentMethod)(0),                                // 1: financial.PaymentMethod
	(RechargeType)(0),                                 // 2: financial.RechargeType
	(ProfitSharingStatus)(0),                          // 3: financial.ProfitSharingStatus
	(ProfitSharingType)(0),                            // 4: financial.ProfitSharingType
	(*CreateRechargeRequest)(nil),                     // 5: financial.CreateRechargeRequest
	(*CreateRechargeResponse)(nil),                    // 6: financial.CreateRechargeResponse
	(*GetRechargeRequest)(nil),                        // 7: financial.GetRechargeRequest
	(*GetRechargeResponse)(nil),                       // 8: financial.GetRechargeResponse
	(*UpdateRechargeRequest)(nil),                     // 9: financial.UpdateRechargeRequest
	(*UpdateRechargeResponse)(nil),                    // 10: financial.UpdateRechargeResponse
	(*ListRechargesRequest)(nil),                      // 11: financial.ListRechargesRequest
	(*ListRechargesResponse)(nil),                     // 12: financial.ListRechargesResponse
	(*ProcessRefundRequest)(nil),                      // 13: financial.ProcessRefundRequest
	(*ProcessRefundResponse)(nil),                     // 14: financial.ProcessRefundResponse
	(*GetRechargeStatisticsRequest)(nil),              // 15: financial.GetRechargeStatisticsRequest
	(*GetRechargeStatisticsResponse)(nil),             // 16: financial.GetRechargeStatisticsResponse
	(*CreateProfitSharingRequest)(nil),                // 17: financial.CreateProfitSharingRequest
	(*CreateProfitSharingResponse)(nil),               // 18: financial.CreateProfitSharingResponse
	(*GetProfitSharingRequest)(nil),                   // 19: financial.GetProfitSharingRequest
	(*GetProfitSharingResponse)(nil),                  // 20: financial.GetProfitSharingResponse
	(*UpdateProfitSharingRequest)(nil),                // 21: financial.UpdateProfitSharingRequest
	(*UpdateProfitSharingResponse)(nil),               // 22: financial.UpdateProfitSharingResponse
	(*ListProfitSharingRequest)(nil),                  // 23: financial.ListProfitSharingRequest
	(*ListProfitSharingResponse)(nil),                 // 24: financial.ListProfitSharingResponse
	(*CalculateProfitSharingForRechargeRequest)(nil),  // 25: financial.CalculateProfitSharingForRechargeRequest
	(*CalculateProfitSharingForRechargeResponse)(nil), // 26: financial.CalculateProfitSharingForRechargeResponse
	(*MarkProfitSharingAsPaidRequest)(nil),            // 27: financial.MarkProfitSharingAsPaidRequest
	(*MarkProfitSharingAsPaidResponse)(nil),           // 28: financial.MarkProfitSharingAsPaidResponse
	(*CancelProfitSharingRequest)(nil),                // 29: financial.CancelProfitSharingRequest
	(*CancelProfitSharingResponse)(nil),               // 30: financial.CancelProfitSharingResponse
	(*GenerateFinancialStatementRequest)(nil),         // 31: financial.GenerateFinancialStatementRequest
	(*GenerateFinancialStatementResponse)(nil),        // 32: financial.GenerateFinancialStatementResponse
	(*GetFinancialStatementRequest)(nil),              // 33: financial.GetFinancialStatementRequest
	(*GetFinancialStatementResponse)(nil),             // 34: financial.GetFinancialStatementResponse
	(*ApproveFinancialStatementRequest)(nil),          // 35: financial.ApproveFinancialStatementRequest
	(*ApproveFinancialStatementResponse)(nil),         // 36: financial.ApproveFinancialStatementResponse
	(*ListFinancialStatementsRequest)(nil),            // 37: financial.ListFinancialStatementsRequest
	(*ListFinancialStatementsResponse)(nil),           // 38: financial.ListFinancialStatementsResponse
	(*Recharge)(nil),                                  // 39: financial.Recharge
	(*ProfitSharing)(nil),                             // 40: financial.ProfitSharing
	(*FinancialStatement)(nil),                        // 41: financial.FinancialStatement
	(*RechargeStatistics)(nil),                        // 42: financial.RechargeStatistics
	(*timestamppb.Timestamp)(nil),                     // 43: google.protobuf.Timestamp
}
var file_financial_financial_proto_depIdxs = []int32{
	2,  // 0: financial.CreateRechargeRequest.type:type_name -> financial.RechargeType
	1,  // 1: financial.CreateRechargeRequest.payment_method:type_name -> financial.PaymentMethod
	39, // 2: financial.CreateRechargeResponse.recharge:type_name -> financial.Recharge
	39, // 3: financial.GetRechargeResponse.recharge:type_name -> financial.Recharge
	0,  // 4: financial.UpdateRechargeRequest.status:type_name -> financial.RechargeStatus
	39, // 5: financial.UpdateRechargeResponse.recharge:type_name -> financial.Recharge
	0,  // 6: financial.ListRechargesRequest.status:type_name -> financial.RechargeStatus
	2,  // 7: financial.ListRechargesRequest.type:type_name -> financial.RechargeType
	1,  // 8: financial.ListRechargesRequest.payment_method:type_name -> financial.PaymentMethod
	39, // 9: financial.ListRechargesResponse.recharges:type_name -> financial.Recharge
	39, // 10: financial.ProcessRefundResponse.recharge:type_name -> financial.Recharge
	42, // 11: financial.GetRechargeStatisticsResponse.statistics:type_name -> financial.RechargeStatistics
	4,  // 12: financial.CreateProfitSharingRequest.source_type:type_name -> financial.ProfitSharingType
	43, // 13: financial.CreateProfitSharingRequest.period_start:type_name -> google.protobuf.Timestamp
	43, // 14: financial.CreateProfitSharingRequest.period_end:type_name -> google.protobuf.Timestamp
	40, // 15: financial.CreateProfitSharingResponse.profit_sharing:type_name -> financial.ProfitSharing
	40, // 16: financial.GetProfitSharingResponse.profit_sharing:type_name -> financial.ProfitSharing
	3,  // 17: financial.UpdateProfitSharingRequest.status:type_name -> financial.ProfitSharingStatus
	40, // 18: financial.UpdateProfitSharingResponse.profit_sharing:type_name -> financial.ProfitSharing
	3,  // 19: financial.ListProfitSharingRequest.status:type_name -> financial.ProfitSharingStatus
	4,  // 20: financial.ListProfitSharingRequest.source_type:type_name -> financial.ProfitSharingType
	43, // 21: financial.ListProfitSharingRequest.start_date:type_name -> google.protobuf.Timestamp
	43, // 22: financial.ListProfitSharingRequest.end_date:type_name -> google.protobuf.Timestamp
	40, // 23: financial.ListProfitSharingResponse.data:type_name -> financial.ProfitSharing
	40, // 24: financial.CalculateProfitSharingForRechargeResponse.profit_sharing:type_name -> financial.ProfitSharing
	40, // 25: financial.MarkProfitSharingAsPaidResponse.profit_sharing:type_name -> financial.ProfitSharing
	40, // 26: financial.CancelProfitSharingResponse.profit_sharing:type_name -> financial.ProfitSharing
	43, // 27: financial.GenerateFinancialStatementRequest.period_start:type_name -> google.protobuf.Timestamp
	43, // 28: financial.GenerateFinancialStatementRequest.period_end:type_name -> google.protobuf.Timestamp
	41, // 29: financial.GenerateFinancialStatementResponse.statement:type_name -> financial.FinancialStatement
	41, // 30: financial.GetFinancialStatementResponse.statement:type_name -> financial.FinancialStatement
	41, // 31: financial.ApproveFinancialStatementResponse.statement:type_name -> financial.FinancialStatement
	43, // 32: financial.ListFinancialStatementsRequest.start_date:type_name -> google.protobuf.Timestamp
	43, // 33: financial.ListFinancialStatementsRequest.end_date:type_name -> google.protobuf.Timestamp
	41, // 34: financial.ListFinancialStatementsResponse.statements:type_name -> financial.FinancialStatement
	43, // 35: financial.Recharge.created_at:type_name -> google.protobuf.Timestamp
	43, // 36: financial.Recharge.updated_at:type_name -> google.protobuf.Timestamp
	2,  // 37: financial.Recharge.type:type_name -> financial.RechargeType
	0,  // 38: financial.Recharge.status:type_name -> financial.RechargeStatus
	1,  // 39: financial.Recharge.payment_method:type_name -> financial.PaymentMethod
	43, // 40: financial.Recharge.processed_at:type_name -> google.protobuf.Timestamp
	43, // 41: financial.Recharge.completed_at:type_name -> google.protobuf.Timestamp
	43, // 42: financial.Recharge.failed_at:type_name -> google.protobuf.Timestamp
	43, // 43: financial.Recharge.refunded_at:type_name -> google.protobuf.Timestamp
	43, // 44: financial.ProfitSharing.created_at:type_name -> google.protobuf.Timestamp
	43, // 45: financial.ProfitSharing.updated_at:type_name -> google.protobuf.Timestamp
	4,  // 46: financial.ProfitSharing.source_type:type_name -> financial.ProfitSharingType
	43, // 47: financial.ProfitSharing.calculation_date:type_name -> google.protobuf.Timestamp
	43, // 48: financial.ProfitSharing.period_start:type_name -> google.protobuf.Timestamp
	43, // 49: financial.ProfitSharing.period_end:type_name -> google.protobuf.Timestamp
	3,  // 50: financial.ProfitSharing.status:type_name -> financial.ProfitSharingStatus
	43, // 51: financial.ProfitSharing.processed_at:type_name -> google.protobuf.Timestamp
	43, // 52: financial.ProfitSharing.payment_date:type_name -> google.protobuf.Timestamp
	43, // 53: financial.FinancialStatement.created_at:type_name -> google.protobuf.Timestamp
	43, // 54: financial.FinancialStatement.updated_at:type_name -> google.protobuf.Timestamp
	43, // 55: financial.FinancialStatement.period_start:type_name -> google.protobuf.Timestamp
	43, // 56: financial.FinancialStatement.period_end:type_name -> google.protobuf.Timestamp
	43, // 57: financial.FinancialStatement.generated_at:type_name -> google.protobuf.Timestamp
	43, // 58: financial.FinancialStatement.approved_at:type_name -> google.protobuf.Timestamp
	5,  // 59: financial.FinancialService.CreateRecharge:input_type -> financial.CreateRechargeRequest
	7,  // 60: financial.FinancialService.GetRecharge:input_type -> financial.GetRechargeRequest
	9,  // 61: financial.FinancialService.UpdateRecharge:input_type -> financial.UpdateRechargeRequest
	11, // 62: financial.FinancialService.ListRecharges:input_type -> financial.ListRechargesRequest
	13, // 63: financial.FinancialService.ProcessRefund:input_type -> financial.ProcessRefundRequest
	15, // 64: financial.FinancialService.GetRechargeStatistics:input_type -> financial.GetRechargeStatisticsRequest
	17, // 65: financial.FinancialService.CreateProfitSharing:input_type -> financial.CreateProfitSharingRequest
	19, // 66: financial.FinancialService.GetProfitSharing:input_type -> financial.GetProfitSharingRequest
	21, // 67: financial.FinancialService.UpdateProfitSharing:input_type -> financial.UpdateProfitSharingRequest
	23, // 68: financial.FinancialService.ListProfitSharing:input_type -> financial.ListProfitSharingRequest
	25, // 69: financial.FinancialService.CalculateProfitSharingForRecharge:input_type -> financial.CalculateProfitSharingForRechargeRequest
	27, // 70: financial.FinancialService.MarkProfitSharingAsPaid:input_type -> financial.MarkProfitSharingAsPaidRequest
	29, // 71: financial.FinancialService.CancelProfitSharing:input_type -> financial.CancelProfitSharingRequest
	31, // 72: financial.FinancialService.GenerateFinancialStatement:input_type -> financial.GenerateFinancialStatementRequest
	33, // 73: financial.FinancialService.GetFinancialStatement:input_type -> financial.GetFinancialStatementRequest
	35, // 74: financial.FinancialService.ApproveFinancialStatement:input_type -> financial.ApproveFinancialStatementRequest
	37, // 75: financial.FinancialService.ListFinancialStatements:input_type -> financial.ListFinancialStatementsRequest
	6,  // 76: financial.FinancialService.CreateRecharge:output_type -> financial.CreateRechargeResponse
	8,  // 77: financial.FinancialService.GetRecharge:output_type -> financial.GetRechargeResponse
	10, // 78: financial.FinancialService.UpdateRecharge:output_type -> financial.UpdateRechargeResponse
	12, // 79: financial.FinancialService.ListRecharges:output_type -> financial.ListRechargesResponse
	14, // 80: financial.FinancialService.ProcessRefund:output_type -> financial.ProcessRefundResponse
	16, // 81: financial.FinancialService.GetRechargeStatistics:output_type -> financial.GetRechargeStatisticsResponse
	18, // 82: financial.FinancialService.CreateProfitSharing:output_type -> financial.CreateProfitSharingResponse
	20, // 83: financial.FinancialService.GetProfitSharing:output_type -> financial.GetProfitSharingResponse
	22, // 84: financial.FinancialService.UpdateProfitSharing:output_type -> financial.UpdateProfitSharingResponse
	24, // 85: financial.FinancialService.ListProfitSharing:output_type -> financial.ListProfitSharingResponse
	26, // 86: financial.FinancialService.CalculateProfitSharingForRecharge:output_type -> financial.CalculateProfitSharingForRechargeResponse
	28, // 87: financial.FinancialService.MarkProfitSharingAsPaid:output_type -> financial.MarkProfitSharingAsPaidResponse
	30, // 88: financial.FinancialService.CancelProfitSharing:output_type -> financial.CancelProfitSharingResponse
	32, // 89: financial.FinancialService.GenerateFinancialStatement:output_type -> financial.GenerateFinancialStatementResponse
	34, // 90: financial.FinancialService.GetFinancialStatement:output_type -> financial.GetFinancialStatementResponse
	36, // 91: financial.FinancialService.ApproveFinancialStatement:output_type -> financial.ApproveFinancialStatementResponse
	38, // 92: financial.FinancialService.ListFinancialStatements:output_type -> financial.ListFinancialStatementsResponse
	76, // [76:93] is the sub-list for method output_type
	59, // [59:76] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_financial_financial_proto_init() }
func file_financial_financial_proto_init() {
	if File_financial_financial_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_financial_financial_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRechargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRechargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetRechargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetRechargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRechargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateRechargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*ListRechargesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*ListRechargesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessRefundRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ProcessRefundResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetRechargeStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetRechargeStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProfitSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CreateProfitSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetProfitSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*GetProfitSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateProfitSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateProfitSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*ListProfitSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ListProfitSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateProfitSharingForRechargeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*CalculateProfitSharingForRechargeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*MarkProfitSharingAsPaidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*MarkProfitSharingAsPaidResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*CancelProfitSharingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*CancelProfitSharingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateFinancialStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*GenerateFinancialStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*GetFinancialStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*GetFinancialStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ApproveFinancialStatementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*ApproveFinancialStatementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*ListFinancialStatementsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*ListFinancialStatementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*Recharge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*ProfitSharing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*FinancialStatement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_financial_financial_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*RechargeStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_financial_financial_proto_msgTypes[4].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[6].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[10].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[16].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[18].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[32].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[34].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[35].OneofWrappers = []any{}
	file_financial_financial_proto_msgTypes[36].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_financial_financial_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_financial_financial_proto_goTypes,
		DependencyIndexes: file_financial_financial_proto_depIdxs,
		EnumInfos:         file_financial_financial_proto_enumTypes,
		MessageInfos:      file_financial_financial_proto_msgTypes,
	}.Build()
	File_financial_financial_proto = out.File
	file_financial_financial_proto_rawDesc = nil
	file_financial_financial_proto_goTypes = nil
	file_financial_financial_proto_depIdxs = nil
}
