// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: realtime/realtime.proto

package realtime

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	common "smartcam-proto/common"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RealtimeService_CreateSignalingSession_FullMethodName  = "/realtime.RealtimeService/CreateSignalingSession"
	RealtimeService_GetSignalingSession_FullMethodName     = "/realtime.RealtimeService/GetSignalingSession"
	RealtimeService_CloseSignalingSession_FullMethodName   = "/realtime.RealtimeService/CloseSignalingSession"
	RealtimeService_GetUserSessions_FullMethodName         = "/realtime.RealtimeService/GetUserSessions"
	RealtimeService_ProcessSDPOffer_FullMethodName         = "/realtime.RealtimeService/ProcessSDPOffer"
	RealtimeService_ProcessSDPAnswer_FullMethodName        = "/realtime.RealtimeService/ProcessSDPAnswer"
	RealtimeService_AddICECandidate_FullMethodName         = "/realtime.RealtimeService/AddICECandidate"
	RealtimeService_GetICECandidates_FullMethodName        = "/realtime.RealtimeService/GetICECandidates"
	RealtimeService_UpdateConnectionState_FullMethodName   = "/realtime.RealtimeService/UpdateConnectionState"
	RealtimeService_RecordConnectionMetrics_FullMethodName = "/realtime.RealtimeService/RecordConnectionMetrics"
	RealtimeService_GetConnectionMetrics_FullMethodName    = "/realtime.RealtimeService/GetConnectionMetrics"
	RealtimeService_HealthCheck_FullMethodName             = "/realtime.RealtimeService/HealthCheck"
)

// RealtimeServiceClient is the client API for RealtimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeServiceClient interface {
	// WebRTC Signaling Session Management
	CreateSignalingSession(ctx context.Context, in *CreateSignalingSessionRequest, opts ...grpc.CallOption) (*CreateSignalingSessionResponse, error)
	GetSignalingSession(ctx context.Context, in *GetSignalingSessionRequest, opts ...grpc.CallOption) (*GetSignalingSessionResponse, error)
	CloseSignalingSession(ctx context.Context, in *CloseSignalingSessionRequest, opts ...grpc.CallOption) (*CloseSignalingSessionResponse, error)
	GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error)
	// WebRTC SDP Exchange
	ProcessSDPOffer(ctx context.Context, in *ProcessSDPOfferRequest, opts ...grpc.CallOption) (*ProcessSDPOfferResponse, error)
	ProcessSDPAnswer(ctx context.Context, in *ProcessSDPAnswerRequest, opts ...grpc.CallOption) (*ProcessSDPAnswerResponse, error)
	// ICE Candidate Exchange
	AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error)
	GetICECandidates(ctx context.Context, in *GetICECandidatesRequest, opts ...grpc.CallOption) (*GetICECandidatesResponse, error)
	// Connection State Management
	UpdateConnectionState(ctx context.Context, in *UpdateConnectionStateRequest, opts ...grpc.CallOption) (*UpdateConnectionStateResponse, error)
	// Connection Quality Metrics
	RecordConnectionMetrics(ctx context.Context, in *RecordConnectionMetricsRequest, opts ...grpc.CallOption) (*RecordConnectionMetricsResponse, error)
	GetConnectionMetrics(ctx context.Context, in *GetConnectionMetricsRequest, opts ...grpc.CallOption) (*GetConnectionMetricsResponse, error)
	// Health Check
	HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error)
}

type realtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeServiceClient(cc grpc.ClientConnInterface) RealtimeServiceClient {
	return &realtimeServiceClient{cc}
}

func (c *realtimeServiceClient) CreateSignalingSession(ctx context.Context, in *CreateSignalingSessionRequest, opts ...grpc.CallOption) (*CreateSignalingSessionResponse, error) {
	out := new(CreateSignalingSessionResponse)
	err := c.cc.Invoke(ctx, RealtimeService_CreateSignalingSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) GetSignalingSession(ctx context.Context, in *GetSignalingSessionRequest, opts ...grpc.CallOption) (*GetSignalingSessionResponse, error) {
	out := new(GetSignalingSessionResponse)
	err := c.cc.Invoke(ctx, RealtimeService_GetSignalingSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) CloseSignalingSession(ctx context.Context, in *CloseSignalingSessionRequest, opts ...grpc.CallOption) (*CloseSignalingSessionResponse, error) {
	out := new(CloseSignalingSessionResponse)
	err := c.cc.Invoke(ctx, RealtimeService_CloseSignalingSession_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) GetUserSessions(ctx context.Context, in *GetUserSessionsRequest, opts ...grpc.CallOption) (*GetUserSessionsResponse, error) {
	out := new(GetUserSessionsResponse)
	err := c.cc.Invoke(ctx, RealtimeService_GetUserSessions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) ProcessSDPOffer(ctx context.Context, in *ProcessSDPOfferRequest, opts ...grpc.CallOption) (*ProcessSDPOfferResponse, error) {
	out := new(ProcessSDPOfferResponse)
	err := c.cc.Invoke(ctx, RealtimeService_ProcessSDPOffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) ProcessSDPAnswer(ctx context.Context, in *ProcessSDPAnswerRequest, opts ...grpc.CallOption) (*ProcessSDPAnswerResponse, error) {
	out := new(ProcessSDPAnswerResponse)
	err := c.cc.Invoke(ctx, RealtimeService_ProcessSDPAnswer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) AddICECandidate(ctx context.Context, in *AddICECandidateRequest, opts ...grpc.CallOption) (*AddICECandidateResponse, error) {
	out := new(AddICECandidateResponse)
	err := c.cc.Invoke(ctx, RealtimeService_AddICECandidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) GetICECandidates(ctx context.Context, in *GetICECandidatesRequest, opts ...grpc.CallOption) (*GetICECandidatesResponse, error) {
	out := new(GetICECandidatesResponse)
	err := c.cc.Invoke(ctx, RealtimeService_GetICECandidates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) UpdateConnectionState(ctx context.Context, in *UpdateConnectionStateRequest, opts ...grpc.CallOption) (*UpdateConnectionStateResponse, error) {
	out := new(UpdateConnectionStateResponse)
	err := c.cc.Invoke(ctx, RealtimeService_UpdateConnectionState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) RecordConnectionMetrics(ctx context.Context, in *RecordConnectionMetricsRequest, opts ...grpc.CallOption) (*RecordConnectionMetricsResponse, error) {
	out := new(RecordConnectionMetricsResponse)
	err := c.cc.Invoke(ctx, RealtimeService_RecordConnectionMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) GetConnectionMetrics(ctx context.Context, in *GetConnectionMetricsRequest, opts ...grpc.CallOption) (*GetConnectionMetricsResponse, error) {
	out := new(GetConnectionMetricsResponse)
	err := c.cc.Invoke(ctx, RealtimeService_GetConnectionMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *realtimeServiceClient) HealthCheck(ctx context.Context, in *common.HealthCheckRequest, opts ...grpc.CallOption) (*common.HealthCheckResponse, error) {
	out := new(common.HealthCheckResponse)
	err := c.cc.Invoke(ctx, RealtimeService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RealtimeServiceServer is the server API for RealtimeService service.
// All implementations must embed UnimplementedRealtimeServiceServer
// for forward compatibility
type RealtimeServiceServer interface {
	// WebRTC Signaling Session Management
	CreateSignalingSession(context.Context, *CreateSignalingSessionRequest) (*CreateSignalingSessionResponse, error)
	GetSignalingSession(context.Context, *GetSignalingSessionRequest) (*GetSignalingSessionResponse, error)
	CloseSignalingSession(context.Context, *CloseSignalingSessionRequest) (*CloseSignalingSessionResponse, error)
	GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error)
	// WebRTC SDP Exchange
	ProcessSDPOffer(context.Context, *ProcessSDPOfferRequest) (*ProcessSDPOfferResponse, error)
	ProcessSDPAnswer(context.Context, *ProcessSDPAnswerRequest) (*ProcessSDPAnswerResponse, error)
	// ICE Candidate Exchange
	AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error)
	GetICECandidates(context.Context, *GetICECandidatesRequest) (*GetICECandidatesResponse, error)
	// Connection State Management
	UpdateConnectionState(context.Context, *UpdateConnectionStateRequest) (*UpdateConnectionStateResponse, error)
	// Connection Quality Metrics
	RecordConnectionMetrics(context.Context, *RecordConnectionMetricsRequest) (*RecordConnectionMetricsResponse, error)
	GetConnectionMetrics(context.Context, *GetConnectionMetricsRequest) (*GetConnectionMetricsResponse, error)
	// Health Check
	HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error)
	mustEmbedUnimplementedRealtimeServiceServer()
}

// UnimplementedRealtimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRealtimeServiceServer struct {
}

func (UnimplementedRealtimeServiceServer) CreateSignalingSession(context.Context, *CreateSignalingSessionRequest) (*CreateSignalingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSignalingSession not implemented")
}
func (UnimplementedRealtimeServiceServer) GetSignalingSession(context.Context, *GetSignalingSessionRequest) (*GetSignalingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignalingSession not implemented")
}
func (UnimplementedRealtimeServiceServer) CloseSignalingSession(context.Context, *CloseSignalingSessionRequest) (*CloseSignalingSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSignalingSession not implemented")
}
func (UnimplementedRealtimeServiceServer) GetUserSessions(context.Context, *GetUserSessionsRequest) (*GetUserSessionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSessions not implemented")
}
func (UnimplementedRealtimeServiceServer) ProcessSDPOffer(context.Context, *ProcessSDPOfferRequest) (*ProcessSDPOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSDPOffer not implemented")
}
func (UnimplementedRealtimeServiceServer) ProcessSDPAnswer(context.Context, *ProcessSDPAnswerRequest) (*ProcessSDPAnswerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessSDPAnswer not implemented")
}
func (UnimplementedRealtimeServiceServer) AddICECandidate(context.Context, *AddICECandidateRequest) (*AddICECandidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddICECandidate not implemented")
}
func (UnimplementedRealtimeServiceServer) GetICECandidates(context.Context, *GetICECandidatesRequest) (*GetICECandidatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetICECandidates not implemented")
}
func (UnimplementedRealtimeServiceServer) UpdateConnectionState(context.Context, *UpdateConnectionStateRequest) (*UpdateConnectionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConnectionState not implemented")
}
func (UnimplementedRealtimeServiceServer) RecordConnectionMetrics(context.Context, *RecordConnectionMetricsRequest) (*RecordConnectionMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecordConnectionMetrics not implemented")
}
func (UnimplementedRealtimeServiceServer) GetConnectionMetrics(context.Context, *GetConnectionMetricsRequest) (*GetConnectionMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnectionMetrics not implemented")
}
func (UnimplementedRealtimeServiceServer) HealthCheck(context.Context, *common.HealthCheckRequest) (*common.HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedRealtimeServiceServer) mustEmbedUnimplementedRealtimeServiceServer() {}

// UnsafeRealtimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServiceServer will
// result in compilation errors.
type UnsafeRealtimeServiceServer interface {
	mustEmbedUnimplementedRealtimeServiceServer()
}

func RegisterRealtimeServiceServer(s grpc.ServiceRegistrar, srv RealtimeServiceServer) {
	s.RegisterService(&RealtimeService_ServiceDesc, srv)
}

func _RealtimeService_CreateSignalingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSignalingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).CreateSignalingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_CreateSignalingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).CreateSignalingSession(ctx, req.(*CreateSignalingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_GetSignalingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSignalingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).GetSignalingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_GetSignalingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).GetSignalingSession(ctx, req.(*GetSignalingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_CloseSignalingSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSignalingSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).CloseSignalingSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_CloseSignalingSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).CloseSignalingSession(ctx, req.(*CloseSignalingSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_GetUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSessionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).GetUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_GetUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).GetUserSessions(ctx, req.(*GetUserSessionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_ProcessSDPOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSDPOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).ProcessSDPOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_ProcessSDPOffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).ProcessSDPOffer(ctx, req.(*ProcessSDPOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_ProcessSDPAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessSDPAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).ProcessSDPAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_ProcessSDPAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).ProcessSDPAnswer(ctx, req.(*ProcessSDPAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_AddICECandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddICECandidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).AddICECandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_AddICECandidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).AddICECandidate(ctx, req.(*AddICECandidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_GetICECandidates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetICECandidatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).GetICECandidates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_GetICECandidates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).GetICECandidates(ctx, req.(*GetICECandidatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_UpdateConnectionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConnectionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).UpdateConnectionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_UpdateConnectionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).UpdateConnectionState(ctx, req.(*UpdateConnectionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_RecordConnectionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordConnectionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).RecordConnectionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_RecordConnectionMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).RecordConnectionMetrics(ctx, req.(*RecordConnectionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_GetConnectionMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConnectionMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).GetConnectionMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_GetConnectionMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).GetConnectionMetrics(ctx, req.(*GetConnectionMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RealtimeService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RealtimeServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RealtimeService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RealtimeServiceServer).HealthCheck(ctx, req.(*common.HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RealtimeService_ServiceDesc is the grpc.ServiceDesc for RealtimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RealtimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "realtime.RealtimeService",
	HandlerType: (*RealtimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSignalingSession",
			Handler:    _RealtimeService_CreateSignalingSession_Handler,
		},
		{
			MethodName: "GetSignalingSession",
			Handler:    _RealtimeService_GetSignalingSession_Handler,
		},
		{
			MethodName: "CloseSignalingSession",
			Handler:    _RealtimeService_CloseSignalingSession_Handler,
		},
		{
			MethodName: "GetUserSessions",
			Handler:    _RealtimeService_GetUserSessions_Handler,
		},
		{
			MethodName: "ProcessSDPOffer",
			Handler:    _RealtimeService_ProcessSDPOffer_Handler,
		},
		{
			MethodName: "ProcessSDPAnswer",
			Handler:    _RealtimeService_ProcessSDPAnswer_Handler,
		},
		{
			MethodName: "AddICECandidate",
			Handler:    _RealtimeService_AddICECandidate_Handler,
		},
		{
			MethodName: "GetICECandidates",
			Handler:    _RealtimeService_GetICECandidates_Handler,
		},
		{
			MethodName: "UpdateConnectionState",
			Handler:    _RealtimeService_UpdateConnectionState_Handler,
		},
		{
			MethodName: "RecordConnectionMetrics",
			Handler:    _RealtimeService_RecordConnectionMetrics_Handler,
		},
		{
			MethodName: "GetConnectionMetrics",
			Handler:    _RealtimeService_GetConnectionMetrics_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _RealtimeService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "realtime/realtime.proto",
}
