// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v6.32.1
// source: dealer/dealer.proto

package dealer

import (
	common "github.com/brianwong1861/smartcam-common/shared-proto/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Dealer Status Enum
type DealerStatus int32

const (
	DealerStatus_DEALER_STATUS_UNSPECIFIED DealerStatus = 0
	DealerStatus_DEALER_STATUS_PENDING     DealerStatus = 1
	DealerStatus_DEALER_STATUS_APPROVED    DealerStatus = 2
	DealerStatus_DEALER_STATUS_REJECTED    DealerStatus = 3
	DealerStatus_DEALER_STATUS_SUSPENDED   DealerStatus = 4
	DealerStatus_DEALER_STATUS_INACTIVE    DealerStatus = 5
)

// Enum value maps for DealerStatus.
var (
	DealerStatus_name = map[int32]string{
		0: "DEALER_STATUS_UNSPECIFIED",
		1: "DEALER_STATUS_PENDING",
		2: "DEALER_STATUS_APPROVED",
		3: "DEALER_STATUS_REJECTED",
		4: "DEALER_STATUS_SUSPENDED",
		5: "DEALER_STATUS_INACTIVE",
	}
	DealerStatus_value = map[string]int32{
		"DEALER_STATUS_UNSPECIFIED": 0,
		"DEALER_STATUS_PENDING":     1,
		"DEALER_STATUS_APPROVED":    2,
		"DEALER_STATUS_REJECTED":    3,
		"DEALER_STATUS_SUSPENDED":   4,
		"DEALER_STATUS_INACTIVE":    5,
	}
)

func (x DealerStatus) Enum() *DealerStatus {
	p := new(DealerStatus)
	*p = x
	return p
}

func (x DealerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_dealer_dealer_proto_enumTypes[0].Descriptor()
}

func (DealerStatus) Type() protoreflect.EnumType {
	return &file_dealer_dealer_proto_enumTypes[0]
}

func (x DealerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealerStatus.Descriptor instead.
func (DealerStatus) EnumDescriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{0}
}

// Dealer Type Enum
type DealerType int32

const (
	DealerType_DEALER_TYPE_UNSPECIFIED DealerType = 0
	DealerType_DEALER_TYPE_PRIMARY     DealerType = 1
	DealerType_DEALER_TYPE_SUB_DEALER  DealerType = 2
	DealerType_DEALER_TYPE_PARTNER     DealerType = 3
	DealerType_DEALER_TYPE_RESELLER    DealerType = 4
)

// Enum value maps for DealerType.
var (
	DealerType_name = map[int32]string{
		0: "DEALER_TYPE_UNSPECIFIED",
		1: "DEALER_TYPE_PRIMARY",
		2: "DEALER_TYPE_SUB_DEALER",
		3: "DEALER_TYPE_PARTNER",
		4: "DEALER_TYPE_RESELLER",
	}
	DealerType_value = map[string]int32{
		"DEALER_TYPE_UNSPECIFIED": 0,
		"DEALER_TYPE_PRIMARY":     1,
		"DEALER_TYPE_SUB_DEALER":  2,
		"DEALER_TYPE_PARTNER":     3,
		"DEALER_TYPE_RESELLER":    4,
	}
)

func (x DealerType) Enum() *DealerType {
	p := new(DealerType)
	*p = x
	return p
}

func (x DealerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DealerType) Descriptor() protoreflect.EnumDescriptor {
	return file_dealer_dealer_proto_enumTypes[1].Descriptor()
}

func (DealerType) Type() protoreflect.EnumType {
	return &file_dealer_dealer_proto_enumTypes[1]
}

func (x DealerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DealerType.Descriptor instead.
func (DealerType) EnumDescriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{1}
}

// Dealer Models
type Dealer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               uint32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid             string       `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	TenantId         string       `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CompanyName      string       `protobuf:"bytes,4,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	ContactName      string       `protobuf:"bytes,5,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactEmail     string       `protobuf:"bytes,6,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPhone     string       `protobuf:"bytes,7,opt,name=contact_phone,json=contactPhone,proto3" json:"contact_phone,omitempty"`
	Address          string       `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`
	City             string       `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`
	State            string       `protobuf:"bytes,10,opt,name=state,proto3" json:"state,omitempty"`
	ZipCode          string       `protobuf:"bytes,11,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty"`
	Country          string       `protobuf:"bytes,12,opt,name=country,proto3" json:"country,omitempty"`
	Status           DealerStatus `protobuf:"varint,13,opt,name=status,proto3,enum=dealer.DealerStatus" json:"status,omitempty"`
	Type             DealerType   `protobuf:"varint,14,opt,name=type,proto3,enum=dealer.DealerType" json:"type,omitempty"`
	IsActive         bool         `protobuf:"varint,15,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	ParentDealerUuid *string      `protobuf:"bytes,16,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3,oneof" json:"parent_dealer_uuid,omitempty"`
	// Approval workflow fields
	ApprovedBy   *string                `protobuf:"bytes,17,opt,name=approved_by,json=approvedBy,proto3,oneof" json:"approved_by,omitempty"`
	ApprovedAt   *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=approved_at,json=approvedAt,proto3,oneof" json:"approved_at,omitempty"`
	RejectedBy   *string                `protobuf:"bytes,19,opt,name=rejected_by,json=rejectedBy,proto3,oneof" json:"rejected_by,omitempty"`
	RejectedAt   *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=rejected_at,json=rejectedAt,proto3,oneof" json:"rejected_at,omitempty"`
	RejectReason *string                `protobuf:"bytes,21,opt,name=reject_reason,json=rejectReason,proto3,oneof" json:"reject_reason,omitempty"`
	// Business information
	BusinessLicense *string `protobuf:"bytes,22,opt,name=business_license,json=businessLicense,proto3,oneof" json:"business_license,omitempty"`
	TaxId           *string `protobuf:"bytes,23,opt,name=tax_id,json=taxId,proto3,oneof" json:"tax_id,omitempty"`
	Website         *string `protobuf:"bytes,24,opt,name=website,proto3,oneof" json:"website,omitempty"`
	// Timestamps
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Additional metadata
	Metadata *structpb.Struct `protobuf:"bytes,27,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Dealer) Reset() {
	*x = Dealer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dealer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dealer) ProtoMessage() {}

func (x *Dealer) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dealer.ProtoReflect.Descriptor instead.
func (*Dealer) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{0}
}

func (x *Dealer) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Dealer) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Dealer) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *Dealer) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *Dealer) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Dealer) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *Dealer) GetContactPhone() string {
	if x != nil {
		return x.ContactPhone
	}
	return ""
}

func (x *Dealer) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Dealer) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Dealer) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Dealer) GetZipCode() string {
	if x != nil {
		return x.ZipCode
	}
	return ""
}

func (x *Dealer) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Dealer) GetStatus() DealerStatus {
	if x != nil {
		return x.Status
	}
	return DealerStatus_DEALER_STATUS_UNSPECIFIED
}

func (x *Dealer) GetType() DealerType {
	if x != nil {
		return x.Type
	}
	return DealerType_DEALER_TYPE_UNSPECIFIED
}

func (x *Dealer) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Dealer) GetParentDealerUuid() string {
	if x != nil && x.ParentDealerUuid != nil {
		return *x.ParentDealerUuid
	}
	return ""
}

func (x *Dealer) GetApprovedBy() string {
	if x != nil && x.ApprovedBy != nil {
		return *x.ApprovedBy
	}
	return ""
}

func (x *Dealer) GetApprovedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ApprovedAt
	}
	return nil
}

func (x *Dealer) GetRejectedBy() string {
	if x != nil && x.RejectedBy != nil {
		return *x.RejectedBy
	}
	return ""
}

func (x *Dealer) GetRejectedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.RejectedAt
	}
	return nil
}

func (x *Dealer) GetRejectReason() string {
	if x != nil && x.RejectReason != nil {
		return *x.RejectReason
	}
	return ""
}

func (x *Dealer) GetBusinessLicense() string {
	if x != nil && x.BusinessLicense != nil {
		return *x.BusinessLicense
	}
	return ""
}

func (x *Dealer) GetTaxId() string {
	if x != nil && x.TaxId != nil {
		return *x.TaxId
	}
	return ""
}

func (x *Dealer) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *Dealer) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Dealer) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Dealer) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Create Dealer
type CreateDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId         string           `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CompanyName      string           `protobuf:"bytes,2,opt,name=company_name,json=companyName,proto3" json:"company_name,omitempty"`
	ContactName      string           `protobuf:"bytes,3,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ContactEmail     string           `protobuf:"bytes,4,opt,name=contact_email,json=contactEmail,proto3" json:"contact_email,omitempty"`
	ContactPhone     *string          `protobuf:"bytes,5,opt,name=contact_phone,json=contactPhone,proto3,oneof" json:"contact_phone,omitempty"`
	Address          *string          `protobuf:"bytes,6,opt,name=address,proto3,oneof" json:"address,omitempty"`
	City             *string          `protobuf:"bytes,7,opt,name=city,proto3,oneof" json:"city,omitempty"`
	State            *string          `protobuf:"bytes,8,opt,name=state,proto3,oneof" json:"state,omitempty"`
	ZipCode          *string          `protobuf:"bytes,9,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	Country          *string          `protobuf:"bytes,10,opt,name=country,proto3,oneof" json:"country,omitempty"`
	Type             DealerType       `protobuf:"varint,11,opt,name=type,proto3,enum=dealer.DealerType" json:"type,omitempty"`
	ParentDealerUuid *string          `protobuf:"bytes,12,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3,oneof" json:"parent_dealer_uuid,omitempty"`
	BusinessLicense  *string          `protobuf:"bytes,13,opt,name=business_license,json=businessLicense,proto3,oneof" json:"business_license,omitempty"`
	TaxId            *string          `protobuf:"bytes,14,opt,name=tax_id,json=taxId,proto3,oneof" json:"tax_id,omitempty"`
	Website          *string          `protobuf:"bytes,15,opt,name=website,proto3,oneof" json:"website,omitempty"`
	Metadata         *structpb.Struct `protobuf:"bytes,16,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *CreateDealerRequest) Reset() {
	*x = CreateDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDealerRequest) ProtoMessage() {}

func (x *CreateDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDealerRequest.ProtoReflect.Descriptor instead.
func (*CreateDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{1}
}

func (x *CreateDealerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateDealerRequest) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *CreateDealerRequest) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *CreateDealerRequest) GetContactEmail() string {
	if x != nil {
		return x.ContactEmail
	}
	return ""
}

func (x *CreateDealerRequest) GetContactPhone() string {
	if x != nil && x.ContactPhone != nil {
		return *x.ContactPhone
	}
	return ""
}

func (x *CreateDealerRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *CreateDealerRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *CreateDealerRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *CreateDealerRequest) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *CreateDealerRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *CreateDealerRequest) GetType() DealerType {
	if x != nil {
		return x.Type
	}
	return DealerType_DEALER_TYPE_UNSPECIFIED
}

func (x *CreateDealerRequest) GetParentDealerUuid() string {
	if x != nil && x.ParentDealerUuid != nil {
		return *x.ParentDealerUuid
	}
	return ""
}

func (x *CreateDealerRequest) GetBusinessLicense() string {
	if x != nil && x.BusinessLicense != nil {
		return *x.BusinessLicense
	}
	return ""
}

func (x *CreateDealerRequest) GetTaxId() string {
	if x != nil && x.TaxId != nil {
		return *x.TaxId
	}
	return ""
}

func (x *CreateDealerRequest) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *CreateDealerRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type CreateDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *CreateDealerResponse) Reset() {
	*x = CreateDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDealerResponse) ProtoMessage() {}

func (x *CreateDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDealerResponse.ProtoReflect.Descriptor instead.
func (*CreateDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{2}
}

func (x *CreateDealerResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *CreateDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Get Dealer
type GetDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid string  `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId   *string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
}

func (x *GetDealerRequest) Reset() {
	*x = GetDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerRequest) ProtoMessage() {}

func (x *GetDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerRequest.ProtoReflect.Descriptor instead.
func (*GetDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{3}
}

func (x *GetDealerRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *GetDealerRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

type GetDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetDealerResponse) Reset() {
	*x = GetDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerResponse) ProtoMessage() {}

func (x *GetDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerResponse.ProtoReflect.Descriptor instead.
func (*GetDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{4}
}

func (x *GetDealerResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *GetDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Update Dealer
type UpdateDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid      string           `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId        string           `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	CompanyName     *string          `protobuf:"bytes,3,opt,name=company_name,json=companyName,proto3,oneof" json:"company_name,omitempty"`
	ContactName     *string          `protobuf:"bytes,4,opt,name=contact_name,json=contactName,proto3,oneof" json:"contact_name,omitempty"`
	ContactEmail    *string          `protobuf:"bytes,5,opt,name=contact_email,json=contactEmail,proto3,oneof" json:"contact_email,omitempty"`
	ContactPhone    *string          `protobuf:"bytes,6,opt,name=contact_phone,json=contactPhone,proto3,oneof" json:"contact_phone,omitempty"`
	Address         *string          `protobuf:"bytes,7,opt,name=address,proto3,oneof" json:"address,omitempty"`
	City            *string          `protobuf:"bytes,8,opt,name=city,proto3,oneof" json:"city,omitempty"`
	State           *string          `protobuf:"bytes,9,opt,name=state,proto3,oneof" json:"state,omitempty"`
	ZipCode         *string          `protobuf:"bytes,10,opt,name=zip_code,json=zipCode,proto3,oneof" json:"zip_code,omitempty"`
	Country         *string          `protobuf:"bytes,11,opt,name=country,proto3,oneof" json:"country,omitempty"`
	BusinessLicense *string          `protobuf:"bytes,12,opt,name=business_license,json=businessLicense,proto3,oneof" json:"business_license,omitempty"`
	TaxId           *string          `protobuf:"bytes,13,opt,name=tax_id,json=taxId,proto3,oneof" json:"tax_id,omitempty"`
	Website         *string          `protobuf:"bytes,14,opt,name=website,proto3,oneof" json:"website,omitempty"`
	Metadata        *structpb.Struct `protobuf:"bytes,15,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
}

func (x *UpdateDealerRequest) Reset() {
	*x = UpdateDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDealerRequest) ProtoMessage() {}

func (x *UpdateDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDealerRequest.ProtoReflect.Descriptor instead.
func (*UpdateDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateDealerRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *UpdateDealerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateDealerRequest) GetCompanyName() string {
	if x != nil && x.CompanyName != nil {
		return *x.CompanyName
	}
	return ""
}

func (x *UpdateDealerRequest) GetContactName() string {
	if x != nil && x.ContactName != nil {
		return *x.ContactName
	}
	return ""
}

func (x *UpdateDealerRequest) GetContactEmail() string {
	if x != nil && x.ContactEmail != nil {
		return *x.ContactEmail
	}
	return ""
}

func (x *UpdateDealerRequest) GetContactPhone() string {
	if x != nil && x.ContactPhone != nil {
		return *x.ContactPhone
	}
	return ""
}

func (x *UpdateDealerRequest) GetAddress() string {
	if x != nil && x.Address != nil {
		return *x.Address
	}
	return ""
}

func (x *UpdateDealerRequest) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *UpdateDealerRequest) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *UpdateDealerRequest) GetZipCode() string {
	if x != nil && x.ZipCode != nil {
		return *x.ZipCode
	}
	return ""
}

func (x *UpdateDealerRequest) GetCountry() string {
	if x != nil && x.Country != nil {
		return *x.Country
	}
	return ""
}

func (x *UpdateDealerRequest) GetBusinessLicense() string {
	if x != nil && x.BusinessLicense != nil {
		return *x.BusinessLicense
	}
	return ""
}

func (x *UpdateDealerRequest) GetTaxId() string {
	if x != nil && x.TaxId != nil {
		return *x.TaxId
	}
	return ""
}

func (x *UpdateDealerRequest) GetWebsite() string {
	if x != nil && x.Website != nil {
		return *x.Website
	}
	return ""
}

func (x *UpdateDealerRequest) GetMetadata() *structpb.Struct {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type UpdateDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *UpdateDealerResponse) Reset() {
	*x = UpdateDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDealerResponse) ProtoMessage() {}

func (x *UpdateDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDealerResponse.ProtoReflect.Descriptor instead.
func (*UpdateDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateDealerResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *UpdateDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Delete Dealer
type DeleteDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid string `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId   string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *DeleteDealerRequest) Reset() {
	*x = DeleteDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDealerRequest) ProtoMessage() {}

func (x *DeleteDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDealerRequest.ProtoReflect.Descriptor instead.
func (*DeleteDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteDealerRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *DeleteDealerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type DeleteDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *DeleteDealerResponse) Reset() {
	*x = DeleteDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDealerResponse) ProtoMessage() {}

func (x *DeleteDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDealerResponse.ProtoReflect.Descriptor instead.
func (*DeleteDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteDealerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// List Dealers
type ListDealersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TenantId         *string                   `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
	Status           *DealerStatus             `protobuf:"varint,2,opt,name=status,proto3,enum=dealer.DealerStatus,oneof" json:"status,omitempty"`
	Type             *DealerType               `protobuf:"varint,3,opt,name=type,proto3,enum=dealer.DealerType,oneof" json:"type,omitempty"`
	ParentDealerUuid *string                   `protobuf:"bytes,4,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3,oneof" json:"parent_dealer_uuid,omitempty"`
	Search           *string                   `protobuf:"bytes,5,opt,name=search,proto3,oneof" json:"search,omitempty"`
	Pagination       *common.PaginationRequest `protobuf:"bytes,6,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListDealersRequest) Reset() {
	*x = ListDealersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDealersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDealersRequest) ProtoMessage() {}

func (x *ListDealersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDealersRequest.ProtoReflect.Descriptor instead.
func (*ListDealersRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{9}
}

func (x *ListDealersRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *ListDealersRequest) GetStatus() DealerStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return DealerStatus_DEALER_STATUS_UNSPECIFIED
}

func (x *ListDealersRequest) GetType() DealerType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DealerType_DEALER_TYPE_UNSPECIFIED
}

func (x *ListDealersRequest) GetParentDealerUuid() string {
	if x != nil && x.ParentDealerUuid != nil {
		return *x.ParentDealerUuid
	}
	return ""
}

func (x *ListDealersRequest) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *ListDealersRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListDealersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealers      []*Dealer                  `protobuf:"bytes,1,rep,name=dealers,proto3" json:"dealers,omitempty"`
	Pagination   *common.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ErrorMessage string                     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ListDealersResponse) Reset() {
	*x = ListDealersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDealersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDealersResponse) ProtoMessage() {}

func (x *ListDealersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDealersResponse.ProtoReflect.Descriptor instead.
func (*ListDealersResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{10}
}

func (x *ListDealersResponse) GetDealers() []*Dealer {
	if x != nil {
		return x.Dealers
	}
	return nil
}

func (x *ListDealersResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListDealersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Update Dealer Status
type UpdateDealerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid string       `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId   string       `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	Status     DealerStatus `protobuf:"varint,3,opt,name=status,proto3,enum=dealer.DealerStatus" json:"status,omitempty"`
	Reason     *string      `protobuf:"bytes,4,opt,name=reason,proto3,oneof" json:"reason,omitempty"`
}

func (x *UpdateDealerStatusRequest) Reset() {
	*x = UpdateDealerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDealerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDealerStatusRequest) ProtoMessage() {}

func (x *UpdateDealerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDealerStatusRequest.ProtoReflect.Descriptor instead.
func (*UpdateDealerStatusRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateDealerStatusRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *UpdateDealerStatusRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *UpdateDealerStatusRequest) GetStatus() DealerStatus {
	if x != nil {
		return x.Status
	}
	return DealerStatus_DEALER_STATUS_UNSPECIFIED
}

func (x *UpdateDealerStatusRequest) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

type UpdateDealerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *UpdateDealerStatusResponse) Reset() {
	*x = UpdateDealerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDealerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDealerStatusResponse) ProtoMessage() {}

func (x *UpdateDealerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDealerStatusResponse.ProtoReflect.Descriptor instead.
func (*UpdateDealerStatusResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{12}
}

func (x *UpdateDealerStatusResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *UpdateDealerStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Get Dealer Status
type GetDealerStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid string  `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId   *string `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
}

func (x *GetDealerStatusRequest) Reset() {
	*x = GetDealerStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerStatusRequest) ProtoMessage() {}

func (x *GetDealerStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerStatusRequest.ProtoReflect.Descriptor instead.
func (*GetDealerStatusRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{13}
}

func (x *GetDealerStatusRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *GetDealerStatusRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

type GetDealerStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status       DealerStatus           `protobuf:"varint,1,opt,name=status,proto3,enum=dealer.DealerStatus" json:"status,omitempty"`
	IsActive     bool                   `protobuf:"varint,2,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	LastUpdated  *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,4,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetDealerStatusResponse) Reset() {
	*x = GetDealerStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerStatusResponse) ProtoMessage() {}

func (x *GetDealerStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerStatusResponse.ProtoReflect.Descriptor instead.
func (*GetDealerStatusResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{14}
}

func (x *GetDealerStatusResponse) GetStatus() DealerStatus {
	if x != nil {
		return x.Status
	}
	return DealerStatus_DEALER_STATUS_UNSPECIFIED
}

func (x *GetDealerStatusResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *GetDealerStatusResponse) GetLastUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdated
	}
	return nil
}

func (x *GetDealerStatusResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Approve Dealer Application
type ApproveDealerApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid string  `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId   string  `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	ApprovedBy string  `protobuf:"bytes,3,opt,name=approved_by,json=approvedBy,proto3" json:"approved_by,omitempty"`
	Notes      *string `protobuf:"bytes,4,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *ApproveDealerApplicationRequest) Reset() {
	*x = ApproveDealerApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDealerApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDealerApplicationRequest) ProtoMessage() {}

func (x *ApproveDealerApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDealerApplicationRequest.ProtoReflect.Descriptor instead.
func (*ApproveDealerApplicationRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{15}
}

func (x *ApproveDealerApplicationRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *ApproveDealerApplicationRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *ApproveDealerApplicationRequest) GetApprovedBy() string {
	if x != nil {
		return x.ApprovedBy
	}
	return ""
}

func (x *ApproveDealerApplicationRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type ApproveDealerApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ApproveDealerApplicationResponse) Reset() {
	*x = ApproveDealerApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApproveDealerApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApproveDealerApplicationResponse) ProtoMessage() {}

func (x *ApproveDealerApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApproveDealerApplicationResponse.ProtoReflect.Descriptor instead.
func (*ApproveDealerApplicationResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{16}
}

func (x *ApproveDealerApplicationResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *ApproveDealerApplicationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Reject Dealer Application
type RejectDealerApplicationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DealerUuid   string  `protobuf:"bytes,1,opt,name=dealer_uuid,json=dealerUuid,proto3" json:"dealer_uuid,omitempty"`
	TenantId     string  `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	RejectedBy   string  `protobuf:"bytes,3,opt,name=rejected_by,json=rejectedBy,proto3" json:"rejected_by,omitempty"`
	RejectReason string  `protobuf:"bytes,4,opt,name=reject_reason,json=rejectReason,proto3" json:"reject_reason,omitempty"`
	Notes        *string `protobuf:"bytes,5,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *RejectDealerApplicationRequest) Reset() {
	*x = RejectDealerApplicationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectDealerApplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectDealerApplicationRequest) ProtoMessage() {}

func (x *RejectDealerApplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectDealerApplicationRequest.ProtoReflect.Descriptor instead.
func (*RejectDealerApplicationRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{17}
}

func (x *RejectDealerApplicationRequest) GetDealerUuid() string {
	if x != nil {
		return x.DealerUuid
	}
	return ""
}

func (x *RejectDealerApplicationRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *RejectDealerApplicationRequest) GetRejectedBy() string {
	if x != nil {
		return x.RejectedBy
	}
	return ""
}

func (x *RejectDealerApplicationRequest) GetRejectReason() string {
	if x != nil {
		return x.RejectReason
	}
	return ""
}

func (x *RejectDealerApplicationRequest) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type RejectDealerApplicationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dealer       *Dealer `protobuf:"bytes,1,opt,name=dealer,proto3" json:"dealer,omitempty"`
	ErrorMessage string  `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RejectDealerApplicationResponse) Reset() {
	*x = RejectDealerApplicationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RejectDealerApplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RejectDealerApplicationResponse) ProtoMessage() {}

func (x *RejectDealerApplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RejectDealerApplicationResponse.ProtoReflect.Descriptor instead.
func (*RejectDealerApplicationResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{18}
}

func (x *RejectDealerApplicationResponse) GetDealer() *Dealer {
	if x != nil {
		return x.Dealer
	}
	return nil
}

func (x *RejectDealerApplicationResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Add Sub-Dealer
type AddSubDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDealerUuid string `protobuf:"bytes,1,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3" json:"parent_dealer_uuid,omitempty"`
	SubDealerUuid    string `protobuf:"bytes,2,opt,name=sub_dealer_uuid,json=subDealerUuid,proto3" json:"sub_dealer_uuid,omitempty"`
	TenantId         string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *AddSubDealerRequest) Reset() {
	*x = AddSubDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubDealerRequest) ProtoMessage() {}

func (x *AddSubDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubDealerRequest.ProtoReflect.Descriptor instead.
func (*AddSubDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{19}
}

func (x *AddSubDealerRequest) GetParentDealerUuid() string {
	if x != nil {
		return x.ParentDealerUuid
	}
	return ""
}

func (x *AddSubDealerRequest) GetSubDealerUuid() string {
	if x != nil {
		return x.SubDealerUuid
	}
	return ""
}

func (x *AddSubDealerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type AddSubDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *AddSubDealerResponse) Reset() {
	*x = AddSubDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubDealerResponse) ProtoMessage() {}

func (x *AddSubDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubDealerResponse.ProtoReflect.Descriptor instead.
func (*AddSubDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{20}
}

func (x *AddSubDealerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AddSubDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Remove Sub-Dealer
type RemoveSubDealerRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDealerUuid string `protobuf:"bytes,1,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3" json:"parent_dealer_uuid,omitempty"`
	SubDealerUuid    string `protobuf:"bytes,2,opt,name=sub_dealer_uuid,json=subDealerUuid,proto3" json:"sub_dealer_uuid,omitempty"`
	TenantId         string `protobuf:"bytes,3,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
}

func (x *RemoveSubDealerRequest) Reset() {
	*x = RemoveSubDealerRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubDealerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubDealerRequest) ProtoMessage() {}

func (x *RemoveSubDealerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubDealerRequest.ProtoReflect.Descriptor instead.
func (*RemoveSubDealerRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{21}
}

func (x *RemoveSubDealerRequest) GetParentDealerUuid() string {
	if x != nil {
		return x.ParentDealerUuid
	}
	return ""
}

func (x *RemoveSubDealerRequest) GetSubDealerUuid() string {
	if x != nil {
		return x.SubDealerUuid
	}
	return ""
}

func (x *RemoveSubDealerRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type RemoveSubDealerResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success      bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *RemoveSubDealerResponse) Reset() {
	*x = RemoveSubDealerResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSubDealerResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSubDealerResponse) ProtoMessage() {}

func (x *RemoveSubDealerResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSubDealerResponse.ProtoReflect.Descriptor instead.
func (*RemoveSubDealerResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{22}
}

func (x *RemoveSubDealerResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoveSubDealerResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// List Sub-Dealers
type ListSubDealersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParentDealerUuid string                    `protobuf:"bytes,1,opt,name=parent_dealer_uuid,json=parentDealerUuid,proto3" json:"parent_dealer_uuid,omitempty"`
	TenantId         *string                   `protobuf:"bytes,2,opt,name=tenant_id,json=tenantId,proto3,oneof" json:"tenant_id,omitempty"`
	Pagination       *common.PaginationRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (x *ListSubDealersRequest) Reset() {
	*x = ListSubDealersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubDealersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubDealersRequest) ProtoMessage() {}

func (x *ListSubDealersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubDealersRequest.ProtoReflect.Descriptor instead.
func (*ListSubDealersRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{23}
}

func (x *ListSubDealersRequest) GetParentDealerUuid() string {
	if x != nil {
		return x.ParentDealerUuid
	}
	return ""
}

func (x *ListSubDealersRequest) GetTenantId() string {
	if x != nil && x.TenantId != nil {
		return *x.TenantId
	}
	return ""
}

func (x *ListSubDealersRequest) GetPagination() *common.PaginationRequest {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListSubDealersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubDealers   []*Dealer                  `protobuf:"bytes,1,rep,name=sub_dealers,json=subDealers,proto3" json:"sub_dealers,omitempty"`
	Pagination   *common.PaginationResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
	ErrorMessage string                     `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *ListSubDealersResponse) Reset() {
	*x = ListSubDealersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubDealersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubDealersResponse) ProtoMessage() {}

func (x *ListSubDealersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubDealersResponse.ProtoReflect.Descriptor instead.
func (*ListSubDealersResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{24}
}

func (x *ListSubDealersResponse) GetSubDealers() []*Dealer {
	if x != nil {
		return x.SubDealers
	}
	return nil
}

func (x *ListSubDealersResponse) GetPagination() *common.PaginationResponse {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *ListSubDealersResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

// Service Health
type GetDealerServiceHealthRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDealerServiceHealthRequest) Reset() {
	*x = GetDealerServiceHealthRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerServiceHealthRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerServiceHealthRequest) ProtoMessage() {}

func (x *GetDealerServiceHealthRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerServiceHealthRequest.ProtoReflect.Descriptor instead.
func (*GetDealerServiceHealthRequest) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{25}
}

type GetDealerServiceHealthResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Healthy      bool                   `protobuf:"varint,1,opt,name=healthy,proto3" json:"healthy,omitempty"`
	Status       string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Services     []string               `protobuf:"bytes,4,rep,name=services,proto3" json:"services,omitempty"`
	ErrorMessage string                 `protobuf:"bytes,5,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *GetDealerServiceHealthResponse) Reset() {
	*x = GetDealerServiceHealthResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dealer_dealer_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDealerServiceHealthResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDealerServiceHealthResponse) ProtoMessage() {}

func (x *GetDealerServiceHealthResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dealer_dealer_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDealerServiceHealthResponse.ProtoReflect.Descriptor instead.
func (*GetDealerServiceHealthResponse) Descriptor() ([]byte, []int) {
	return file_dealer_dealer_proto_rawDescGZIP(), []int{26}
}

func (x *GetDealerServiceHealthResponse) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *GetDealerServiceHealthResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetDealerServiceHealthResponse) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GetDealerServiceHealthResponse) GetServices() []string {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *GetDealerServiceHealthResponse) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

var File_dealer_dealer_proto protoreflect.FileDescriptor

var file_dealer_dealer_proto_rawDesc = []byte{
	0x0a, 0x13, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9d, 0x09, 0x0a, 0x06, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x19, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x41,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0a, 0x72, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x65, 0x64, 0x42, 0x79, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x04, 0x52, 0x0a, 0x72,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x06, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x15, 0x0a, 0x13,
	0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74,
	0x61, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74,
	0x65, 0x22, 0xf3, 0x05, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e,
	0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x04, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d,
	0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x05, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69,
	0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x0f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x0a,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x10, 0x0a,
	0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x63, 0x69, 0x74, 0x79, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x13,
	0x0a, 0x11, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52,
	0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x63, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x22, 0x60, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xe5, 0x05, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x02, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0c, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x08, 0x7a, 0x69, 0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x07, 0x52, 0x07, 0x7a, 0x69, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x88, 0x01, 0x01, 0x12,
	0x2e, 0x0a, 0x10, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09, 0x52, 0x0f, 0x62, 0x75, 0x73,
	0x69, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x0a, 0x52, 0x05, 0x74, 0x61, 0x78, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x07,
	0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x7a, 0x69,
	0x70, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x74, 0x61, 0x78, 0x5f,
	0x69, 0x64, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x63, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x53, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xe5, 0x02, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x48, 0x02, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x22, 0xa0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x07, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1b, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x09,
	0x0a, 0x07, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x69, 0x0a, 0x1a, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x69, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22,
	0xc8, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1f, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x42, 0x79, 0x12, 0x19, 0x0a,
	0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x22, 0x6f, 0x0a, 0x20, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0xc9, 0x01, 0x0a, 0x1e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x42, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x05, 0x6e, 0x6f,
	0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x6e, 0x6f, 0x74,
	0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x22,
	0x6e, 0x0a, 0x1f, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x26, 0x0a, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x06, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x88, 0x01, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75, 0x62, 0x5f, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x55, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x8b, 0x01, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x75,
	0x62, 0x5f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x22,
	0x58, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xaa, 0x01, 0x0a,
	0x16, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x3a, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61,
	0x6c, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48,
	0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xb9, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x19, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45,
	0x41, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x1b, 0x0a,
	0x17, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53,
	0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x04, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45,
	0x41, 0x4c, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x49, 0x4e, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x05, 0x2a, 0x91, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x42, 0x5f, 0x44,
	0x45, 0x41, 0x4c, 0x45, 0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x45, 0x41, 0x4c, 0x45,
	0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x4e, 0x45, 0x52, 0x10, 0x03,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x45, 0x41, 0x4c, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x45, 0x53, 0x45, 0x4c, 0x4c, 0x45, 0x52, 0x10, 0x04, 0x32, 0xdf, 0x08, 0x0a, 0x0d, 0x44,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64,
	0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x1a,
	0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5b, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21, 0x2e,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x44, 0x65,
	0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6a, 0x0a, 0x17, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x64, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64,
	0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62,
	0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52,
	0x0a, 0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65,
	0x72, 0x12, 0x1e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61,
	0x6c, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x75, 0x62, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x12, 0x25, 0x2e,
	0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x48, 0x65,
	0x61, 0x6c, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x3e, 0x5a, 0x3c,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x69, 0x61, 0x6e,
	0x77, 0x6f, 0x6e, 0x67, 0x31, 0x38, 0x36, 0x31, 0x2f, 0x73, 0x6d, 0x61, 0x72, 0x74, 0x63, 0x61,
	0x6d, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2d,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x65, 0x61, 0x6c, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dealer_dealer_proto_rawDescOnce sync.Once
	file_dealer_dealer_proto_rawDescData = file_dealer_dealer_proto_rawDesc
)

func file_dealer_dealer_proto_rawDescGZIP() []byte {
	file_dealer_dealer_proto_rawDescOnce.Do(func() {
		file_dealer_dealer_proto_rawDescData = protoimpl.X.CompressGZIP(file_dealer_dealer_proto_rawDescData)
	})
	return file_dealer_dealer_proto_rawDescData
}

var file_dealer_dealer_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_dealer_dealer_proto_msgTypes = make([]protoimpl.MessageInfo, 27)
var file_dealer_dealer_proto_goTypes = []any{
	(DealerStatus)(0),                        // 0: dealer.DealerStatus
	(DealerType)(0),                          // 1: dealer.DealerType
	(*Dealer)(nil),                           // 2: dealer.Dealer
	(*CreateDealerRequest)(nil),              // 3: dealer.CreateDealerRequest
	(*CreateDealerResponse)(nil),             // 4: dealer.CreateDealerResponse
	(*GetDealerRequest)(nil),                 // 5: dealer.GetDealerRequest
	(*GetDealerResponse)(nil),                // 6: dealer.GetDealerResponse
	(*UpdateDealerRequest)(nil),              // 7: dealer.UpdateDealerRequest
	(*UpdateDealerResponse)(nil),             // 8: dealer.UpdateDealerResponse
	(*DeleteDealerRequest)(nil),              // 9: dealer.DeleteDealerRequest
	(*DeleteDealerResponse)(nil),             // 10: dealer.DeleteDealerResponse
	(*ListDealersRequest)(nil),               // 11: dealer.ListDealersRequest
	(*ListDealersResponse)(nil),              // 12: dealer.ListDealersResponse
	(*UpdateDealerStatusRequest)(nil),        // 13: dealer.UpdateDealerStatusRequest
	(*UpdateDealerStatusResponse)(nil),       // 14: dealer.UpdateDealerStatusResponse
	(*GetDealerStatusRequest)(nil),           // 15: dealer.GetDealerStatusRequest
	(*GetDealerStatusResponse)(nil),          // 16: dealer.GetDealerStatusResponse
	(*ApproveDealerApplicationRequest)(nil),  // 17: dealer.ApproveDealerApplicationRequest
	(*ApproveDealerApplicationResponse)(nil), // 18: dealer.ApproveDealerApplicationResponse
	(*RejectDealerApplicationRequest)(nil),   // 19: dealer.RejectDealerApplicationRequest
	(*RejectDealerApplicationResponse)(nil),  // 20: dealer.RejectDealerApplicationResponse
	(*AddSubDealerRequest)(nil),              // 21: dealer.AddSubDealerRequest
	(*AddSubDealerResponse)(nil),             // 22: dealer.AddSubDealerResponse
	(*RemoveSubDealerRequest)(nil),           // 23: dealer.RemoveSubDealerRequest
	(*RemoveSubDealerResponse)(nil),          // 24: dealer.RemoveSubDealerResponse
	(*ListSubDealersRequest)(nil),            // 25: dealer.ListSubDealersRequest
	(*ListSubDealersResponse)(nil),           // 26: dealer.ListSubDealersResponse
	(*GetDealerServiceHealthRequest)(nil),    // 27: dealer.GetDealerServiceHealthRequest
	(*GetDealerServiceHealthResponse)(nil),   // 28: dealer.GetDealerServiceHealthResponse
	(*timestamppb.Timestamp)(nil),            // 29: google.protobuf.Timestamp
	(*structpb.Struct)(nil),                  // 30: google.protobuf.Struct
	(*common.PaginationRequest)(nil),         // 31: common.PaginationRequest
	(*common.PaginationResponse)(nil),        // 32: common.PaginationResponse
}
var file_dealer_dealer_proto_depIdxs = []int32{
	0,  // 0: dealer.Dealer.status:type_name -> dealer.DealerStatus
	1,  // 1: dealer.Dealer.type:type_name -> dealer.DealerType
	29, // 2: dealer.Dealer.approved_at:type_name -> google.protobuf.Timestamp
	29, // 3: dealer.Dealer.rejected_at:type_name -> google.protobuf.Timestamp
	29, // 4: dealer.Dealer.created_at:type_name -> google.protobuf.Timestamp
	29, // 5: dealer.Dealer.updated_at:type_name -> google.protobuf.Timestamp
	30, // 6: dealer.Dealer.metadata:type_name -> google.protobuf.Struct
	1,  // 7: dealer.CreateDealerRequest.type:type_name -> dealer.DealerType
	30, // 8: dealer.CreateDealerRequest.metadata:type_name -> google.protobuf.Struct
	2,  // 9: dealer.CreateDealerResponse.dealer:type_name -> dealer.Dealer
	2,  // 10: dealer.GetDealerResponse.dealer:type_name -> dealer.Dealer
	30, // 11: dealer.UpdateDealerRequest.metadata:type_name -> google.protobuf.Struct
	2,  // 12: dealer.UpdateDealerResponse.dealer:type_name -> dealer.Dealer
	0,  // 13: dealer.ListDealersRequest.status:type_name -> dealer.DealerStatus
	1,  // 14: dealer.ListDealersRequest.type:type_name -> dealer.DealerType
	31, // 15: dealer.ListDealersRequest.pagination:type_name -> common.PaginationRequest
	2,  // 16: dealer.ListDealersResponse.dealers:type_name -> dealer.Dealer
	32, // 17: dealer.ListDealersResponse.pagination:type_name -> common.PaginationResponse
	0,  // 18: dealer.UpdateDealerStatusRequest.status:type_name -> dealer.DealerStatus
	2,  // 19: dealer.UpdateDealerStatusResponse.dealer:type_name -> dealer.Dealer
	0,  // 20: dealer.GetDealerStatusResponse.status:type_name -> dealer.DealerStatus
	29, // 21: dealer.GetDealerStatusResponse.last_updated:type_name -> google.protobuf.Timestamp
	2,  // 22: dealer.ApproveDealerApplicationResponse.dealer:type_name -> dealer.Dealer
	2,  // 23: dealer.RejectDealerApplicationResponse.dealer:type_name -> dealer.Dealer
	31, // 24: dealer.ListSubDealersRequest.pagination:type_name -> common.PaginationRequest
	2,  // 25: dealer.ListSubDealersResponse.sub_dealers:type_name -> dealer.Dealer
	32, // 26: dealer.ListSubDealersResponse.pagination:type_name -> common.PaginationResponse
	29, // 27: dealer.GetDealerServiceHealthResponse.timestamp:type_name -> google.protobuf.Timestamp
	3,  // 28: dealer.DealerService.CreateDealer:input_type -> dealer.CreateDealerRequest
	5,  // 29: dealer.DealerService.GetDealer:input_type -> dealer.GetDealerRequest
	7,  // 30: dealer.DealerService.UpdateDealer:input_type -> dealer.UpdateDealerRequest
	9,  // 31: dealer.DealerService.DeleteDealer:input_type -> dealer.DeleteDealerRequest
	11, // 32: dealer.DealerService.ListDealers:input_type -> dealer.ListDealersRequest
	13, // 33: dealer.DealerService.UpdateDealerStatus:input_type -> dealer.UpdateDealerStatusRequest
	15, // 34: dealer.DealerService.GetDealerStatus:input_type -> dealer.GetDealerStatusRequest
	17, // 35: dealer.DealerService.ApproveDealerApplication:input_type -> dealer.ApproveDealerApplicationRequest
	19, // 36: dealer.DealerService.RejectDealerApplication:input_type -> dealer.RejectDealerApplicationRequest
	21, // 37: dealer.DealerService.AddSubDealer:input_type -> dealer.AddSubDealerRequest
	23, // 38: dealer.DealerService.RemoveSubDealer:input_type -> dealer.RemoveSubDealerRequest
	25, // 39: dealer.DealerService.ListSubDealers:input_type -> dealer.ListSubDealersRequest
	27, // 40: dealer.DealerService.GetDealerServiceHealth:input_type -> dealer.GetDealerServiceHealthRequest
	4,  // 41: dealer.DealerService.CreateDealer:output_type -> dealer.CreateDealerResponse
	6,  // 42: dealer.DealerService.GetDealer:output_type -> dealer.GetDealerResponse
	8,  // 43: dealer.DealerService.UpdateDealer:output_type -> dealer.UpdateDealerResponse
	10, // 44: dealer.DealerService.DeleteDealer:output_type -> dealer.DeleteDealerResponse
	12, // 45: dealer.DealerService.ListDealers:output_type -> dealer.ListDealersResponse
	14, // 46: dealer.DealerService.UpdateDealerStatus:output_type -> dealer.UpdateDealerStatusResponse
	16, // 47: dealer.DealerService.GetDealerStatus:output_type -> dealer.GetDealerStatusResponse
	18, // 48: dealer.DealerService.ApproveDealerApplication:output_type -> dealer.ApproveDealerApplicationResponse
	20, // 49: dealer.DealerService.RejectDealerApplication:output_type -> dealer.RejectDealerApplicationResponse
	22, // 50: dealer.DealerService.AddSubDealer:output_type -> dealer.AddSubDealerResponse
	24, // 51: dealer.DealerService.RemoveSubDealer:output_type -> dealer.RemoveSubDealerResponse
	26, // 52: dealer.DealerService.ListSubDealers:output_type -> dealer.ListSubDealersResponse
	28, // 53: dealer.DealerService.GetDealerServiceHealth:output_type -> dealer.GetDealerServiceHealthResponse
	41, // [41:54] is the sub-list for method output_type
	28, // [28:41] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_dealer_dealer_proto_init() }
func file_dealer_dealer_proto_init() {
	if File_dealer_dealer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dealer_dealer_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Dealer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CreateDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*ListDealersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*ListDealersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDealerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateDealerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ApproveDealerApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ApproveDealerApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*RejectDealerApplicationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*RejectDealerApplicationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*AddSubDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*AddSubDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveSubDealerRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RemoveSubDealerResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubDealersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*ListSubDealersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerServiceHealthRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dealer_dealer_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*GetDealerServiceHealthResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dealer_dealer_proto_msgTypes[0].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[1].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[3].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[5].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[9].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[11].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[13].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[15].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[17].OneofWrappers = []any{}
	file_dealer_dealer_proto_msgTypes[23].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dealer_dealer_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   27,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dealer_dealer_proto_goTypes,
		DependencyIndexes: file_dealer_dealer_proto_depIdxs,
		EnumInfos:         file_dealer_dealer_proto_enumTypes,
		MessageInfos:      file_dealer_dealer_proto_msgTypes,
	}.Build()
	File_dealer_dealer_proto = out.File
	file_dealer_dealer_proto_rawDesc = nil
	file_dealer_dealer_proto_goTypes = nil
	file_dealer_dealer_proto_depIdxs = nil
}
