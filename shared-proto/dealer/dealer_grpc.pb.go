// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: dealer/dealer.proto

package dealer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DealerService_CreateDealer_FullMethodName             = "/dealer.DealerService/CreateDealer"
	DealerService_GetDealer_FullMethodName                = "/dealer.DealerService/GetDealer"
	DealerService_UpdateDealer_FullMethodName             = "/dealer.DealerService/UpdateDealer"
	DealerService_DeleteDealer_FullMethodName             = "/dealer.DealerService/DeleteDealer"
	DealerService_ListDealers_FullMethodName              = "/dealer.DealerService/ListDealers"
	DealerService_UpdateDealerStatus_FullMethodName       = "/dealer.DealerService/UpdateDealerStatus"
	DealerService_GetDealerStatus_FullMethodName          = "/dealer.DealerService/GetDealerStatus"
	DealerService_ApproveDealerApplication_FullMethodName = "/dealer.DealerService/ApproveDealerApplication"
	DealerService_RejectDealerApplication_FullMethodName  = "/dealer.DealerService/RejectDealerApplication"
	DealerService_AddSubDealer_FullMethodName             = "/dealer.DealerService/AddSubDealer"
	DealerService_RemoveSubDealer_FullMethodName          = "/dealer.DealerService/RemoveSubDealer"
	DealerService_ListSubDealers_FullMethodName           = "/dealer.DealerService/ListSubDealers"
	DealerService_GetDealerServiceHealth_FullMethodName   = "/dealer.DealerService/GetDealerServiceHealth"
)

// DealerServiceClient is the client API for DealerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DealerServiceClient interface {
	// Dealer CRUD Operations
	CreateDealer(ctx context.Context, in *CreateDealerRequest, opts ...grpc.CallOption) (*CreateDealerResponse, error)
	GetDealer(ctx context.Context, in *GetDealerRequest, opts ...grpc.CallOption) (*GetDealerResponse, error)
	UpdateDealer(ctx context.Context, in *UpdateDealerRequest, opts ...grpc.CallOption) (*UpdateDealerResponse, error)
	DeleteDealer(ctx context.Context, in *DeleteDealerRequest, opts ...grpc.CallOption) (*DeleteDealerResponse, error)
	ListDealers(ctx context.Context, in *ListDealersRequest, opts ...grpc.CallOption) (*ListDealersResponse, error)
	// Dealer Status Management
	UpdateDealerStatus(ctx context.Context, in *UpdateDealerStatusRequest, opts ...grpc.CallOption) (*UpdateDealerStatusResponse, error)
	GetDealerStatus(ctx context.Context, in *GetDealerStatusRequest, opts ...grpc.CallOption) (*GetDealerStatusResponse, error)
	// Dealer Approval Workflow
	ApproveDealerApplication(ctx context.Context, in *ApproveDealerApplicationRequest, opts ...grpc.CallOption) (*ApproveDealerApplicationResponse, error)
	RejectDealerApplication(ctx context.Context, in *RejectDealerApplicationRequest, opts ...grpc.CallOption) (*RejectDealerApplicationResponse, error)
	// Dealer Sub-Dealer Management
	AddSubDealer(ctx context.Context, in *AddSubDealerRequest, opts ...grpc.CallOption) (*AddSubDealerResponse, error)
	RemoveSubDealer(ctx context.Context, in *RemoveSubDealerRequest, opts ...grpc.CallOption) (*RemoveSubDealerResponse, error)
	ListSubDealers(ctx context.Context, in *ListSubDealersRequest, opts ...grpc.CallOption) (*ListSubDealersResponse, error)
	// Service Health
	GetDealerServiceHealth(ctx context.Context, in *GetDealerServiceHealthRequest, opts ...grpc.CallOption) (*GetDealerServiceHealthResponse, error)
}

type dealerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDealerServiceClient(cc grpc.ClientConnInterface) DealerServiceClient {
	return &dealerServiceClient{cc}
}

func (c *dealerServiceClient) CreateDealer(ctx context.Context, in *CreateDealerRequest, opts ...grpc.CallOption) (*CreateDealerResponse, error) {
	out := new(CreateDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_CreateDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) GetDealer(ctx context.Context, in *GetDealerRequest, opts ...grpc.CallOption) (*GetDealerResponse, error) {
	out := new(GetDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_GetDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) UpdateDealer(ctx context.Context, in *UpdateDealerRequest, opts ...grpc.CallOption) (*UpdateDealerResponse, error) {
	out := new(UpdateDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_UpdateDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) DeleteDealer(ctx context.Context, in *DeleteDealerRequest, opts ...grpc.CallOption) (*DeleteDealerResponse, error) {
	out := new(DeleteDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_DeleteDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) ListDealers(ctx context.Context, in *ListDealersRequest, opts ...grpc.CallOption) (*ListDealersResponse, error) {
	out := new(ListDealersResponse)
	err := c.cc.Invoke(ctx, DealerService_ListDealers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) UpdateDealerStatus(ctx context.Context, in *UpdateDealerStatusRequest, opts ...grpc.CallOption) (*UpdateDealerStatusResponse, error) {
	out := new(UpdateDealerStatusResponse)
	err := c.cc.Invoke(ctx, DealerService_UpdateDealerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) GetDealerStatus(ctx context.Context, in *GetDealerStatusRequest, opts ...grpc.CallOption) (*GetDealerStatusResponse, error) {
	out := new(GetDealerStatusResponse)
	err := c.cc.Invoke(ctx, DealerService_GetDealerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) ApproveDealerApplication(ctx context.Context, in *ApproveDealerApplicationRequest, opts ...grpc.CallOption) (*ApproveDealerApplicationResponse, error) {
	out := new(ApproveDealerApplicationResponse)
	err := c.cc.Invoke(ctx, DealerService_ApproveDealerApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) RejectDealerApplication(ctx context.Context, in *RejectDealerApplicationRequest, opts ...grpc.CallOption) (*RejectDealerApplicationResponse, error) {
	out := new(RejectDealerApplicationResponse)
	err := c.cc.Invoke(ctx, DealerService_RejectDealerApplication_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) AddSubDealer(ctx context.Context, in *AddSubDealerRequest, opts ...grpc.CallOption) (*AddSubDealerResponse, error) {
	out := new(AddSubDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_AddSubDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) RemoveSubDealer(ctx context.Context, in *RemoveSubDealerRequest, opts ...grpc.CallOption) (*RemoveSubDealerResponse, error) {
	out := new(RemoveSubDealerResponse)
	err := c.cc.Invoke(ctx, DealerService_RemoveSubDealer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) ListSubDealers(ctx context.Context, in *ListSubDealersRequest, opts ...grpc.CallOption) (*ListSubDealersResponse, error) {
	out := new(ListSubDealersResponse)
	err := c.cc.Invoke(ctx, DealerService_ListSubDealers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dealerServiceClient) GetDealerServiceHealth(ctx context.Context, in *GetDealerServiceHealthRequest, opts ...grpc.CallOption) (*GetDealerServiceHealthResponse, error) {
	out := new(GetDealerServiceHealthResponse)
	err := c.cc.Invoke(ctx, DealerService_GetDealerServiceHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DealerServiceServer is the server API for DealerService service.
// All implementations must embed UnimplementedDealerServiceServer
// for forward compatibility
type DealerServiceServer interface {
	// Dealer CRUD Operations
	CreateDealer(context.Context, *CreateDealerRequest) (*CreateDealerResponse, error)
	GetDealer(context.Context, *GetDealerRequest) (*GetDealerResponse, error)
	UpdateDealer(context.Context, *UpdateDealerRequest) (*UpdateDealerResponse, error)
	DeleteDealer(context.Context, *DeleteDealerRequest) (*DeleteDealerResponse, error)
	ListDealers(context.Context, *ListDealersRequest) (*ListDealersResponse, error)
	// Dealer Status Management
	UpdateDealerStatus(context.Context, *UpdateDealerStatusRequest) (*UpdateDealerStatusResponse, error)
	GetDealerStatus(context.Context, *GetDealerStatusRequest) (*GetDealerStatusResponse, error)
	// Dealer Approval Workflow
	ApproveDealerApplication(context.Context, *ApproveDealerApplicationRequest) (*ApproveDealerApplicationResponse, error)
	RejectDealerApplication(context.Context, *RejectDealerApplicationRequest) (*RejectDealerApplicationResponse, error)
	// Dealer Sub-Dealer Management
	AddSubDealer(context.Context, *AddSubDealerRequest) (*AddSubDealerResponse, error)
	RemoveSubDealer(context.Context, *RemoveSubDealerRequest) (*RemoveSubDealerResponse, error)
	ListSubDealers(context.Context, *ListSubDealersRequest) (*ListSubDealersResponse, error)
	// Service Health
	GetDealerServiceHealth(context.Context, *GetDealerServiceHealthRequest) (*GetDealerServiceHealthResponse, error)
	mustEmbedUnimplementedDealerServiceServer()
}

// UnimplementedDealerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDealerServiceServer struct {
}

func (UnimplementedDealerServiceServer) CreateDealer(context.Context, *CreateDealerRequest) (*CreateDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDealer not implemented")
}
func (UnimplementedDealerServiceServer) GetDealer(context.Context, *GetDealerRequest) (*GetDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealer not implemented")
}
func (UnimplementedDealerServiceServer) UpdateDealer(context.Context, *UpdateDealerRequest) (*UpdateDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDealer not implemented")
}
func (UnimplementedDealerServiceServer) DeleteDealer(context.Context, *DeleteDealerRequest) (*DeleteDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDealer not implemented")
}
func (UnimplementedDealerServiceServer) ListDealers(context.Context, *ListDealersRequest) (*ListDealersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDealers not implemented")
}
func (UnimplementedDealerServiceServer) UpdateDealerStatus(context.Context, *UpdateDealerStatusRequest) (*UpdateDealerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDealerStatus not implemented")
}
func (UnimplementedDealerServiceServer) GetDealerStatus(context.Context, *GetDealerStatusRequest) (*GetDealerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealerStatus not implemented")
}
func (UnimplementedDealerServiceServer) ApproveDealerApplication(context.Context, *ApproveDealerApplicationRequest) (*ApproveDealerApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDealerApplication not implemented")
}
func (UnimplementedDealerServiceServer) RejectDealerApplication(context.Context, *RejectDealerApplicationRequest) (*RejectDealerApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectDealerApplication not implemented")
}
func (UnimplementedDealerServiceServer) AddSubDealer(context.Context, *AddSubDealerRequest) (*AddSubDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubDealer not implemented")
}
func (UnimplementedDealerServiceServer) RemoveSubDealer(context.Context, *RemoveSubDealerRequest) (*RemoveSubDealerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSubDealer not implemented")
}
func (UnimplementedDealerServiceServer) ListSubDealers(context.Context, *ListSubDealersRequest) (*ListSubDealersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSubDealers not implemented")
}
func (UnimplementedDealerServiceServer) GetDealerServiceHealth(context.Context, *GetDealerServiceHealthRequest) (*GetDealerServiceHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDealerServiceHealth not implemented")
}
func (UnimplementedDealerServiceServer) mustEmbedUnimplementedDealerServiceServer() {}

// UnsafeDealerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DealerServiceServer will
// result in compilation errors.
type UnsafeDealerServiceServer interface {
	mustEmbedUnimplementedDealerServiceServer()
}

func RegisterDealerServiceServer(s grpc.ServiceRegistrar, srv DealerServiceServer) {
	s.RegisterService(&DealerService_ServiceDesc, srv)
}

func _DealerService_CreateDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).CreateDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_CreateDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).CreateDealer(ctx, req.(*CreateDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_GetDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).GetDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_GetDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).GetDealer(ctx, req.(*GetDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_UpdateDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).UpdateDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_UpdateDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).UpdateDealer(ctx, req.(*UpdateDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_DeleteDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).DeleteDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_DeleteDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).DeleteDealer(ctx, req.(*DeleteDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_ListDealers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDealersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).ListDealers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_ListDealers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).ListDealers(ctx, req.(*ListDealersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_UpdateDealerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDealerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).UpdateDealerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_UpdateDealerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).UpdateDealerStatus(ctx, req.(*UpdateDealerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_GetDealerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).GetDealerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_GetDealerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).GetDealerStatus(ctx, req.(*GetDealerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_ApproveDealerApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveDealerApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).ApproveDealerApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_ApproveDealerApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).ApproveDealerApplication(ctx, req.(*ApproveDealerApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_RejectDealerApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectDealerApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).RejectDealerApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_RejectDealerApplication_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).RejectDealerApplication(ctx, req.(*RejectDealerApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_AddSubDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).AddSubDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_AddSubDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).AddSubDealer(ctx, req.(*AddSubDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_RemoveSubDealer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSubDealerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).RemoveSubDealer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_RemoveSubDealer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).RemoveSubDealer(ctx, req.(*RemoveSubDealerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_ListSubDealers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSubDealersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).ListSubDealers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_ListSubDealers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).ListSubDealers(ctx, req.(*ListSubDealersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DealerService_GetDealerServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDealerServiceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DealerServiceServer).GetDealerServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DealerService_GetDealerServiceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DealerServiceServer).GetDealerServiceHealth(ctx, req.(*GetDealerServiceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DealerService_ServiceDesc is the grpc.ServiceDesc for DealerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DealerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dealer.DealerService",
	HandlerType: (*DealerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDealer",
			Handler:    _DealerService_CreateDealer_Handler,
		},
		{
			MethodName: "GetDealer",
			Handler:    _DealerService_GetDealer_Handler,
		},
		{
			MethodName: "UpdateDealer",
			Handler:    _DealerService_UpdateDealer_Handler,
		},
		{
			MethodName: "DeleteDealer",
			Handler:    _DealerService_DeleteDealer_Handler,
		},
		{
			MethodName: "ListDealers",
			Handler:    _DealerService_ListDealers_Handler,
		},
		{
			MethodName: "UpdateDealerStatus",
			Handler:    _DealerService_UpdateDealerStatus_Handler,
		},
		{
			MethodName: "GetDealerStatus",
			Handler:    _DealerService_GetDealerStatus_Handler,
		},
		{
			MethodName: "ApproveDealerApplication",
			Handler:    _DealerService_ApproveDealerApplication_Handler,
		},
		{
			MethodName: "RejectDealerApplication",
			Handler:    _DealerService_RejectDealerApplication_Handler,
		},
		{
			MethodName: "AddSubDealer",
			Handler:    _DealerService_AddSubDealer_Handler,
		},
		{
			MethodName: "RemoveSubDealer",
			Handler:    _DealerService_RemoveSubDealer_Handler,
		},
		{
			MethodName: "ListSubDealers",
			Handler:    _DealerService_ListSubDealers_Handler,
		},
		{
			MethodName: "GetDealerServiceHealth",
			Handler:    _DealerService_GetDealerServiceHealth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dealer/dealer.proto",
}
