// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: videostream/videostream.proto

package videostream

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VideoStreamService_StartStream_FullMethodName               = "/videostream.VideoStreamService/StartStream"
	VideoStreamService_StopStream_FullMethodName                = "/videostream.VideoStreamService/StopStream"
	VideoStreamService_GetStreamStatus_FullMethodName           = "/videostream.VideoStreamService/GetStreamStatus"
	VideoStreamService_ListActiveStreams_FullMethodName         = "/videostream.VideoStreamService/ListActiveStreams"
	VideoStreamService_UpdateStreamConfiguration_FullMethodName = "/videostream.VideoStreamService/UpdateStreamConfiguration"
	VideoStreamService_GetStreamConfiguration_FullMethodName    = "/videostream.VideoStreamService/GetStreamConfiguration"
	VideoStreamService_GetStreamHealth_FullMethodName           = "/videostream.VideoStreamService/GetStreamHealth"
	VideoStreamService_GetStreamMetrics_FullMethodName          = "/videostream.VideoStreamService/GetStreamMetrics"
	VideoStreamService_StartRecording_FullMethodName            = "/videostream.VideoStreamService/StartRecording"
	VideoStreamService_StopRecording_FullMethodName             = "/videostream.VideoStreamService/StopRecording"
	VideoStreamService_GetRecordingStatus_FullMethodName        = "/videostream.VideoStreamService/GetRecordingStatus"
	VideoStreamService_ListRecordings_FullMethodName            = "/videostream.VideoStreamService/ListRecordings"
)

// VideoStreamServiceClient is the client API for VideoStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoStreamServiceClient interface {
	// Stream Lifecycle Management
	StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error)
	StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error)
	GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error)
	ListActiveStreams(ctx context.Context, in *ListActiveStreamsRequest, opts ...grpc.CallOption) (*ListActiveStreamsResponse, error)
	// Stream Configuration
	UpdateStreamConfiguration(ctx context.Context, in *UpdateStreamConfigurationRequest, opts ...grpc.CallOption) (*UpdateStreamConfigurationResponse, error)
	GetStreamConfiguration(ctx context.Context, in *GetStreamConfigurationRequest, opts ...grpc.CallOption) (*GetStreamConfigurationResponse, error)
	// Stream Health and Monitoring
	GetStreamHealth(ctx context.Context, in *GetStreamHealthRequest, opts ...grpc.CallOption) (*GetStreamHealthResponse, error)
	GetStreamMetrics(ctx context.Context, in *GetStreamMetricsRequest, opts ...grpc.CallOption) (*GetStreamMetricsResponse, error)
	// Recording Management
	StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error)
	StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error)
	GetRecordingStatus(ctx context.Context, in *GetRecordingStatusRequest, opts ...grpc.CallOption) (*GetRecordingStatusResponse, error)
	ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error)
}

type videoStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoStreamServiceClient(cc grpc.ClientConnInterface) VideoStreamServiceClient {
	return &videoStreamServiceClient{cc}
}

func (c *videoStreamServiceClient) StartStream(ctx context.Context, in *StartStreamRequest, opts ...grpc.CallOption) (*StartStreamResponse, error) {
	out := new(StartStreamResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_StartStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) StopStream(ctx context.Context, in *StopStreamRequest, opts ...grpc.CallOption) (*StopStreamResponse, error) {
	out := new(StopStreamResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_StopStream_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetStreamStatus(ctx context.Context, in *GetStreamStatusRequest, opts ...grpc.CallOption) (*GetStreamStatusResponse, error) {
	out := new(GetStreamStatusResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_GetStreamStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) ListActiveStreams(ctx context.Context, in *ListActiveStreamsRequest, opts ...grpc.CallOption) (*ListActiveStreamsResponse, error) {
	out := new(ListActiveStreamsResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_ListActiveStreams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) UpdateStreamConfiguration(ctx context.Context, in *UpdateStreamConfigurationRequest, opts ...grpc.CallOption) (*UpdateStreamConfigurationResponse, error) {
	out := new(UpdateStreamConfigurationResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_UpdateStreamConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetStreamConfiguration(ctx context.Context, in *GetStreamConfigurationRequest, opts ...grpc.CallOption) (*GetStreamConfigurationResponse, error) {
	out := new(GetStreamConfigurationResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_GetStreamConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetStreamHealth(ctx context.Context, in *GetStreamHealthRequest, opts ...grpc.CallOption) (*GetStreamHealthResponse, error) {
	out := new(GetStreamHealthResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_GetStreamHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetStreamMetrics(ctx context.Context, in *GetStreamMetricsRequest, opts ...grpc.CallOption) (*GetStreamMetricsResponse, error) {
	out := new(GetStreamMetricsResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_GetStreamMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) StartRecording(ctx context.Context, in *StartRecordingRequest, opts ...grpc.CallOption) (*StartRecordingResponse, error) {
	out := new(StartRecordingResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_StartRecording_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) StopRecording(ctx context.Context, in *StopRecordingRequest, opts ...grpc.CallOption) (*StopRecordingResponse, error) {
	out := new(StopRecordingResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_StopRecording_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) GetRecordingStatus(ctx context.Context, in *GetRecordingStatusRequest, opts ...grpc.CallOption) (*GetRecordingStatusResponse, error) {
	out := new(GetRecordingStatusResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_GetRecordingStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoStreamServiceClient) ListRecordings(ctx context.Context, in *ListRecordingsRequest, opts ...grpc.CallOption) (*ListRecordingsResponse, error) {
	out := new(ListRecordingsResponse)
	err := c.cc.Invoke(ctx, VideoStreamService_ListRecordings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VideoStreamServiceServer is the server API for VideoStreamService service.
// All implementations must embed UnimplementedVideoStreamServiceServer
// for forward compatibility
type VideoStreamServiceServer interface {
	// Stream Lifecycle Management
	StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error)
	StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error)
	GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error)
	ListActiveStreams(context.Context, *ListActiveStreamsRequest) (*ListActiveStreamsResponse, error)
	// Stream Configuration
	UpdateStreamConfiguration(context.Context, *UpdateStreamConfigurationRequest) (*UpdateStreamConfigurationResponse, error)
	GetStreamConfiguration(context.Context, *GetStreamConfigurationRequest) (*GetStreamConfigurationResponse, error)
	// Stream Health and Monitoring
	GetStreamHealth(context.Context, *GetStreamHealthRequest) (*GetStreamHealthResponse, error)
	GetStreamMetrics(context.Context, *GetStreamMetricsRequest) (*GetStreamMetricsResponse, error)
	// Recording Management
	StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error)
	StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error)
	GetRecordingStatus(context.Context, *GetRecordingStatusRequest) (*GetRecordingStatusResponse, error)
	ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error)
	mustEmbedUnimplementedVideoStreamServiceServer()
}

// UnimplementedVideoStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoStreamServiceServer struct {
}

func (UnimplementedVideoStreamServiceServer) StartStream(context.Context, *StartStreamRequest) (*StartStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartStream not implemented")
}
func (UnimplementedVideoStreamServiceServer) StopStream(context.Context, *StopStreamRequest) (*StopStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopStream not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetStreamStatus(context.Context, *GetStreamStatusRequest) (*GetStreamStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamStatus not implemented")
}
func (UnimplementedVideoStreamServiceServer) ListActiveStreams(context.Context, *ListActiveStreamsRequest) (*ListActiveStreamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListActiveStreams not implemented")
}
func (UnimplementedVideoStreamServiceServer) UpdateStreamConfiguration(context.Context, *UpdateStreamConfigurationRequest) (*UpdateStreamConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStreamConfiguration not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetStreamConfiguration(context.Context, *GetStreamConfigurationRequest) (*GetStreamConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamConfiguration not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetStreamHealth(context.Context, *GetStreamHealthRequest) (*GetStreamHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamHealth not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetStreamMetrics(context.Context, *GetStreamMetricsRequest) (*GetStreamMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamMetrics not implemented")
}
func (UnimplementedVideoStreamServiceServer) StartRecording(context.Context, *StartRecordingRequest) (*StartRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRecording not implemented")
}
func (UnimplementedVideoStreamServiceServer) StopRecording(context.Context, *StopRecordingRequest) (*StopRecordingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRecording not implemented")
}
func (UnimplementedVideoStreamServiceServer) GetRecordingStatus(context.Context, *GetRecordingStatusRequest) (*GetRecordingStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordingStatus not implemented")
}
func (UnimplementedVideoStreamServiceServer) ListRecordings(context.Context, *ListRecordingsRequest) (*ListRecordingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecordings not implemented")
}
func (UnimplementedVideoStreamServiceServer) mustEmbedUnimplementedVideoStreamServiceServer() {}

// UnsafeVideoStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoStreamServiceServer will
// result in compilation errors.
type UnsafeVideoStreamServiceServer interface {
	mustEmbedUnimplementedVideoStreamServiceServer()
}

func RegisterVideoStreamServiceServer(s grpc.ServiceRegistrar, srv VideoStreamServiceServer) {
	s.RegisterService(&VideoStreamService_ServiceDesc, srv)
}

func _VideoStreamService_StartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).StartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_StartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).StartStream(ctx, req.(*StartStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_StopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).StopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_StopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).StopStream(ctx, req.(*StopStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetStreamStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetStreamStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetStreamStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetStreamStatus(ctx, req.(*GetStreamStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_ListActiveStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListActiveStreamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).ListActiveStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_ListActiveStreams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).ListActiveStreams(ctx, req.(*ListActiveStreamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_UpdateStreamConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStreamConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).UpdateStreamConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_UpdateStreamConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).UpdateStreamConfiguration(ctx, req.(*UpdateStreamConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetStreamConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetStreamConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetStreamConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetStreamConfiguration(ctx, req.(*GetStreamConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetStreamHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetStreamHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetStreamHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetStreamHealth(ctx, req.(*GetStreamHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetStreamMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetStreamMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetStreamMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetStreamMetrics(ctx, req.(*GetStreamMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_StartRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).StartRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_StartRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).StartRecording(ctx, req.(*StartRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_StopRecording_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRecordingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).StopRecording(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_StopRecording_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).StopRecording(ctx, req.(*StopRecordingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_GetRecordingStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordingStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).GetRecordingStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_GetRecordingStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).GetRecordingStatus(ctx, req.(*GetRecordingStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoStreamService_ListRecordings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecordingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoStreamServiceServer).ListRecordings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VideoStreamService_ListRecordings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoStreamServiceServer).ListRecordings(ctx, req.(*ListRecordingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VideoStreamService_ServiceDesc is the grpc.ServiceDesc for VideoStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "videostream.VideoStreamService",
	HandlerType: (*VideoStreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartStream",
			Handler:    _VideoStreamService_StartStream_Handler,
		},
		{
			MethodName: "StopStream",
			Handler:    _VideoStreamService_StopStream_Handler,
		},
		{
			MethodName: "GetStreamStatus",
			Handler:    _VideoStreamService_GetStreamStatus_Handler,
		},
		{
			MethodName: "ListActiveStreams",
			Handler:    _VideoStreamService_ListActiveStreams_Handler,
		},
		{
			MethodName: "UpdateStreamConfiguration",
			Handler:    _VideoStreamService_UpdateStreamConfiguration_Handler,
		},
		{
			MethodName: "GetStreamConfiguration",
			Handler:    _VideoStreamService_GetStreamConfiguration_Handler,
		},
		{
			MethodName: "GetStreamHealth",
			Handler:    _VideoStreamService_GetStreamHealth_Handler,
		},
		{
			MethodName: "GetStreamMetrics",
			Handler:    _VideoStreamService_GetStreamMetrics_Handler,
		},
		{
			MethodName: "StartRecording",
			Handler:    _VideoStreamService_StartRecording_Handler,
		},
		{
			MethodName: "StopRecording",
			Handler:    _VideoStreamService_StopRecording_Handler,
		},
		{
			MethodName: "GetRecordingStatus",
			Handler:    _VideoStreamService_GetRecordingStatus_Handler,
		},
		{
			MethodName: "ListRecordings",
			Handler:    _VideoStreamService_ListRecordings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "videostream/videostream.proto",
}
