syntax = "proto3";

package device;

option go_package = "github.com/brianwong1861/smartcam-common/shared-proto/device";

import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "common/common.proto";

// Device Management Service
service DeviceService {
  // Device CRUD Operations
  rpc CreateDevice(CreateDeviceRequest) returns (CreateDeviceResponse);
  rpc GetDevice(GetDeviceRequest) returns (GetDeviceResponse);
  rpc UpdateDevice(UpdateDeviceRequest) returns (UpdateDeviceResponse);
  rpc DeleteDevice(DeleteDeviceRequest) returns (DeleteDeviceResponse);
  rpc ListDevices(ListDevicesRequest) returns (ListDevicesResponse);

  // Device Status Management
  rpc UpdateDeviceStatus(UpdateDeviceStatusRequest) returns (UpdateDeviceStatusResponse);
  rpc GetDeviceStatus(GetDeviceStatusRequest) returns (GetDeviceStatusResponse);
  rpc SyncDeviceStatus(SyncDeviceStatusRequest) returns (SyncDeviceStatusResponse);

  // Device Configuration
  rpc GetDeviceConfiguration(GetDeviceConfigurationRequest) returns (GetDeviceConfigurationResponse);
  rpc UpdateDeviceConfiguration(UpdateDeviceConfigurationRequest) returns (UpdateDeviceConfigurationResponse);

  // Device Commands
  rpc SendDeviceCommand(SendDeviceCommandRequest) returns (SendDeviceCommandResponse);
  rpc GetCommandStatus(GetCommandStatusRequest) returns (GetCommandStatusResponse);
  rpc ListCommands(ListCommandsRequest) returns (ListCommandsResponse);

  // Device Health
  rpc GetDeviceHealth(GetDeviceHealthRequest) returns (GetDeviceHealthResponse);
  rpc CheckDeviceConnectivity(CheckDeviceConnectivityRequest) returns (CheckDeviceConnectivityResponse);

  // Device Registration
  rpc RegisterDevice(RegisterDeviceRequest) returns (RegisterDeviceResponse);
  rpc RegisterDeviceByQR(RegisterDeviceByQRRequest) returns (RegisterDeviceResponse);
  rpc RegisterDeviceByID(RegisterDeviceByIDRequest) returns (RegisterDeviceResponse);
  rpc VerifyDevice(VerifyDeviceRequest) returns (VerifyDeviceResponse);
  rpc UnregisterDevice(UnregisterDeviceRequest) returns (UnregisterDeviceResponse);
  rpc RevokeDeviceCertificate(RevokeDeviceCertificateRequest) returns (RevokeDeviceCertificateResponse);

  // Sales Device Management (for device simulator)
  rpc CreateOrUpdateSalesDevice(CreateOrUpdateSalesDeviceRequest) returns (CreateOrUpdateSalesDeviceResponse);
  rpc GetSalesDevice(GetSalesDeviceRequest) returns (GetSalesDeviceResponse);
  rpc GetRandomSalesDevice(GetRandomSalesDeviceRequest) returns (GetRandomSalesDeviceResponse);
}

// Device Models
message Device {
  string id = 1;
  string uuid = 2;
  string serial_number = 3;
  string thing_name = 4;
  string device_type = 5;
  string status = 6;
  bool is_online = 7;
  uint32 tenant_id = 8;
  google.protobuf.Timestamp last_seen_at = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  google.protobuf.Struct metadata = 12;

  // Device registration fields
  string name = 13;
  string location = 14;
  string description = 15;
  string activation_code = 16;
  string qr_code_data = 17;
  string registration_method = 18;
  google.protobuf.Timestamp activated_at = 19;
  MQTTCredentials mqtt_credentials = 20;
}

message DeviceConfiguration {
  string device_id = 1;
  string thing_name = 2;
  google.protobuf.Struct configuration = 3;
  int32 version = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message DeviceCommand {
  string id = 1;
  string device_id = 2;
  string command_type = 3;
  google.protobuf.Struct payload = 4;
  string status = 5;
  string error_message = 6;
  google.protobuf.Timestamp created_at = 7;
  google.protobuf.Timestamp updated_at = 8;
  google.protobuf.Timestamp executed_at = 9;
}

message DeviceHealth {
  string device_id = 1;
  int32 health_score = 2;
  string status = 3;
  google.protobuf.Timestamp last_check = 4;
  google.protobuf.Struct metrics = 5;
  repeated string issues = 6;
}

message MQTTCredentials {
  string username = 1;
  string broker_url = 2;
  repeated string topics = 3;
  string protocol = 4;
}

message DeviceStatus {
  string device_id = 1;
  MQTTStatus mqtt_status = 2;
  DeviceHealthStatus device_health = 3;
}

message MQTTStatus {
  bool is_connected = 1;
  google.protobuf.Timestamp connected_at = 2;
  google.protobuf.Timestamp disconnected_at = 3;
  google.protobuf.Timestamp last_seen_at = 4;
  string client_id = 5;
  string ip_address = 6;
}

message DeviceHealthStatus {
  string status = 1;
  int32 health_score = 2;
  string firmware_version = 3;
  google.protobuf.Timestamp last_telemetry = 4;
}

// Request/Response Messages
message CreateDeviceRequest {
  string serial_number = 1;
  string device_type = 2;
  uint32 tenant_id = 3;
  google.protobuf.Struct metadata = 4;
}

message CreateDeviceResponse {
  Device device = 1;
  string error_message = 2;
}

message GetDeviceRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message GetDeviceResponse {
  Device device = 1;
  string error_message = 2;
}

message UpdateDeviceRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
  google.protobuf.Struct updates = 3;
}

message UpdateDeviceResponse {
  Device device = 1;
  string error_message = 2;
}

message DeleteDeviceRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message DeleteDeviceResponse {
  bool success = 1;
  string error_message = 2;
}

message ListDevicesRequest {
  uint32 tenant_id = 1;
  string device_type = 2;
  string status = 3;
  optional bool is_online = 4;
  common.PaginationRequest pagination = 5;
}

message ListDevicesResponse {
  repeated Device devices = 1;
  common.PaginationResponse pagination = 2;
  string error_message = 3;
}

message UpdateDeviceStatusRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
  string status = 3;
  optional bool is_online = 4;
  optional google.protobuf.Timestamp last_seen_at = 5;
}

message UpdateDeviceStatusResponse {
  Device device = 1;
  string error_message = 2;
}

message GetDeviceStatusRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message GetDeviceStatusResponse {
  string status = 1;
  bool is_online = 2;
  google.protobuf.Timestamp last_seen_at = 3;
  string error_message = 4;
}

message SyncDeviceStatusRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message SyncDeviceStatusResponse {
  bool success = 1;
  string error_message = 2;
}

message GetDeviceConfigurationRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message GetDeviceConfigurationResponse {
  DeviceConfiguration configuration = 1;
  string error_message = 2;
}

message UpdateDeviceConfigurationRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
  google.protobuf.Struct configuration = 3;
  optional int32 version = 4;
}

message UpdateDeviceConfigurationResponse {
  DeviceConfiguration configuration = 1;
  string error_message = 2;
}

message SendDeviceCommandRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
  string command_type = 3;
  google.protobuf.Struct payload = 4;
  optional int32 timeout_seconds = 5;
}

message SendDeviceCommandResponse {
  DeviceCommand command = 1;
  string error_message = 2;
}

message GetCommandStatusRequest {
  string command_id = 1;
  uint32 tenant_id = 2;
}

message GetCommandStatusResponse {
  DeviceCommand command = 1;
  string error_message = 2;
}

message ListCommandsRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
  string status = 3;
  common.PaginationRequest pagination = 4;
}

message ListCommandsResponse {
  repeated DeviceCommand commands = 1;
  common.PaginationResponse pagination = 2;
  string error_message = 3;
}

message GetDeviceHealthRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message GetDeviceHealthResponse {
  DeviceHealth health = 1;
  string error_message = 2;
}

message CheckDeviceConnectivityRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message CheckDeviceConnectivityResponse {
  bool is_connected = 1;
  int32 response_time_ms = 2;
  string error_message = 3;
}

message RegisterDeviceRequest {
  string serial_number = 1;
  string device_type = 2;
  uint32 tenant_id = 3;
  google.protobuf.Struct metadata = 4;
}

message RegisterDeviceResponse {
  Device device = 1;
  string certificate_arn = 2;
  string error_message = 3;
}

message UnregisterDeviceRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message UnregisterDeviceResponse {
  bool success = 1;
  string error_message = 2;
}

message RevokeDeviceCertificateRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message RevokeDeviceCertificateResponse {
  bool success = 1;
  string error_message = 2;
}

// New device registration messages
message RegisterDeviceByQRRequest {
  string qr_code_data = 1;
  string name = 2;
  string location = 3;
  string description = 4;
  uint32 tenant_id = 5;
}

message RegisterDeviceByIDRequest {
  string device_id = 1;
  string activation_code = 2;
  string name = 3;
  string location = 4;
  string description = 5;
  uint32 tenant_id = 6;
}

message VerifyDeviceRequest {
  string device_id = 1;
  uint32 tenant_id = 2;
}

message VerifyDeviceResponse {
  bool is_valid = 1;
  bool is_available = 2;
  string device_type = 3;
  string model = 4;
  string manufacturer = 5;
  string message = 6;
  string error_message = 7;
}

// Sales Device Messages (for device simulator)
message SalesDevice {
  string serial_number = 1;
  string mac_address = 2;
  string device_type = 3;
  string model = 4;
  string manufacturer = 5;
  string firmware_version = 6;
  string activation_status = 7; // 'pending', 'activated', 'deactivated'
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Struct metadata = 10;
}

message CreateOrUpdateSalesDeviceRequest {
  string serial_number = 1;
  string mac_address = 2;
  string device_type = 3;
  string model = 4;
  string manufacturer = 5;
  string firmware_version = 6;
  google.protobuf.Struct metadata = 7;
}

message CreateOrUpdateSalesDeviceResponse {
  SalesDevice device = 1;
  bool is_new = 2; // true if created, false if updated
  string error_message = 3;
}

message GetSalesDeviceRequest {
  string serial_number = 1;
}

message GetSalesDeviceResponse {
  SalesDevice device = 1;
  bool exists = 2;
  string error_message = 3;
}

message GetRandomSalesDeviceRequest {
  string device_type = 1; // optional filter
}

message GetRandomSalesDeviceResponse {
  SalesDevice device = 1;
  string error_message = 2;
}

