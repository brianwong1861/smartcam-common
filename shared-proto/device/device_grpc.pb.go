// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: device/device.proto

package device

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceService_CreateDevice_FullMethodName              = "/device.DeviceService/CreateDevice"
	DeviceService_GetDevice_FullMethodName                 = "/device.DeviceService/GetDevice"
	DeviceService_UpdateDevice_FullMethodName              = "/device.DeviceService/UpdateDevice"
	DeviceService_DeleteDevice_FullMethodName              = "/device.DeviceService/DeleteDevice"
	DeviceService_ListDevices_FullMethodName               = "/device.DeviceService/ListDevices"
	DeviceService_UpdateDeviceStatus_FullMethodName        = "/device.DeviceService/UpdateDeviceStatus"
	DeviceService_GetDeviceStatus_FullMethodName           = "/device.DeviceService/GetDeviceStatus"
	DeviceService_SyncDeviceStatus_FullMethodName          = "/device.DeviceService/SyncDeviceStatus"
	DeviceService_GetDeviceConfiguration_FullMethodName    = "/device.DeviceService/GetDeviceConfiguration"
	DeviceService_UpdateDeviceConfiguration_FullMethodName = "/device.DeviceService/UpdateDeviceConfiguration"
	DeviceService_SendDeviceCommand_FullMethodName         = "/device.DeviceService/SendDeviceCommand"
	DeviceService_GetCommandStatus_FullMethodName          = "/device.DeviceService/GetCommandStatus"
	DeviceService_ListCommands_FullMethodName              = "/device.DeviceService/ListCommands"
	DeviceService_GetDeviceHealth_FullMethodName           = "/device.DeviceService/GetDeviceHealth"
	DeviceService_CheckDeviceConnectivity_FullMethodName   = "/device.DeviceService/CheckDeviceConnectivity"
	DeviceService_RegisterDevice_FullMethodName            = "/device.DeviceService/RegisterDevice"
	DeviceService_RegisterDeviceByQR_FullMethodName        = "/device.DeviceService/RegisterDeviceByQR"
	DeviceService_RegisterDeviceByID_FullMethodName        = "/device.DeviceService/RegisterDeviceByID"
	DeviceService_VerifyDevice_FullMethodName              = "/device.DeviceService/VerifyDevice"
	DeviceService_UnregisterDevice_FullMethodName          = "/device.DeviceService/UnregisterDevice"
	DeviceService_RevokeDeviceCertificate_FullMethodName   = "/device.DeviceService/RevokeDeviceCertificate"
)

// DeviceServiceClient is the client API for DeviceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceServiceClient interface {
	// Device CRUD Operations
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Device Status Management
	UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*UpdateDeviceStatusResponse, error)
	GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error)
	SyncDeviceStatus(ctx context.Context, in *SyncDeviceStatusRequest, opts ...grpc.CallOption) (*SyncDeviceStatusResponse, error)
	// Device Configuration
	GetDeviceConfiguration(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (*GetDeviceConfigurationResponse, error)
	UpdateDeviceConfiguration(ctx context.Context, in *UpdateDeviceConfigurationRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigurationResponse, error)
	// Device Commands
	SendDeviceCommand(ctx context.Context, in *SendDeviceCommandRequest, opts ...grpc.CallOption) (*SendDeviceCommandResponse, error)
	GetCommandStatus(ctx context.Context, in *GetCommandStatusRequest, opts ...grpc.CallOption) (*GetCommandStatusResponse, error)
	ListCommands(ctx context.Context, in *ListCommandsRequest, opts ...grpc.CallOption) (*ListCommandsResponse, error)
	// Device Health
	GetDeviceHealth(ctx context.Context, in *GetDeviceHealthRequest, opts ...grpc.CallOption) (*GetDeviceHealthResponse, error)
	CheckDeviceConnectivity(ctx context.Context, in *CheckDeviceConnectivityRequest, opts ...grpc.CallOption) (*CheckDeviceConnectivityResponse, error)
	// Device Registration
	RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	RegisterDeviceByQR(ctx context.Context, in *RegisterDeviceByQRRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	RegisterDeviceByID(ctx context.Context, in *RegisterDeviceByIDRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error)
	VerifyDevice(ctx context.Context, in *VerifyDeviceRequest, opts ...grpc.CallOption) (*VerifyDeviceResponse, error)
	UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error)
	RevokeDeviceCertificate(ctx context.Context, in *RevokeDeviceCertificateRequest, opts ...grpc.CallOption) (*RevokeDeviceCertificateResponse, error)
}

type deviceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceServiceClient(cc grpc.ClientConnInterface) DeviceServiceClient {
	return &deviceServiceClient{cc}
}

func (c *deviceServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceService_ListDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDeviceStatus(ctx context.Context, in *UpdateDeviceStatusRequest, opts ...grpc.CallOption) (*UpdateDeviceStatusResponse, error) {
	out := new(UpdateDeviceStatusResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceStatus(ctx context.Context, in *GetDeviceStatusRequest, opts ...grpc.CallOption) (*GetDeviceStatusResponse, error) {
	out := new(GetDeviceStatusResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SyncDeviceStatus(ctx context.Context, in *SyncDeviceStatusRequest, opts ...grpc.CallOption) (*SyncDeviceStatusResponse, error) {
	out := new(SyncDeviceStatusResponse)
	err := c.cc.Invoke(ctx, DeviceService_SyncDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceConfiguration(ctx context.Context, in *GetDeviceConfigurationRequest, opts ...grpc.CallOption) (*GetDeviceConfigurationResponse, error) {
	out := new(GetDeviceConfigurationResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetDeviceConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UpdateDeviceConfiguration(ctx context.Context, in *UpdateDeviceConfigurationRequest, opts ...grpc.CallOption) (*UpdateDeviceConfigurationResponse, error) {
	out := new(UpdateDeviceConfigurationResponse)
	err := c.cc.Invoke(ctx, DeviceService_UpdateDeviceConfiguration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) SendDeviceCommand(ctx context.Context, in *SendDeviceCommandRequest, opts ...grpc.CallOption) (*SendDeviceCommandResponse, error) {
	out := new(SendDeviceCommandResponse)
	err := c.cc.Invoke(ctx, DeviceService_SendDeviceCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetCommandStatus(ctx context.Context, in *GetCommandStatusRequest, opts ...grpc.CallOption) (*GetCommandStatusResponse, error) {
	out := new(GetCommandStatusResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetCommandStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) ListCommands(ctx context.Context, in *ListCommandsRequest, opts ...grpc.CallOption) (*ListCommandsResponse, error) {
	out := new(ListCommandsResponse)
	err := c.cc.Invoke(ctx, DeviceService_ListCommands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) GetDeviceHealth(ctx context.Context, in *GetDeviceHealthRequest, opts ...grpc.CallOption) (*GetDeviceHealthResponse, error) {
	out := new(GetDeviceHealthResponse)
	err := c.cc.Invoke(ctx, DeviceService_GetDeviceHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) CheckDeviceConnectivity(ctx context.Context, in *CheckDeviceConnectivityRequest, opts ...grpc.CallOption) (*CheckDeviceConnectivityResponse, error) {
	out := new(CheckDeviceConnectivityResponse)
	err := c.cc.Invoke(ctx, DeviceService_CheckDeviceConnectivity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RegisterDevice(ctx context.Context, in *RegisterDeviceRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RegisterDeviceByQR(ctx context.Context, in *RegisterDeviceByQRRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_RegisterDeviceByQR_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RegisterDeviceByID(ctx context.Context, in *RegisterDeviceByIDRequest, opts ...grpc.CallOption) (*RegisterDeviceResponse, error) {
	out := new(RegisterDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_RegisterDeviceByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) VerifyDevice(ctx context.Context, in *VerifyDeviceRequest, opts ...grpc.CallOption) (*VerifyDeviceResponse, error) {
	out := new(VerifyDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_VerifyDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) UnregisterDevice(ctx context.Context, in *UnregisterDeviceRequest, opts ...grpc.CallOption) (*UnregisterDeviceResponse, error) {
	out := new(UnregisterDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceService_UnregisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceServiceClient) RevokeDeviceCertificate(ctx context.Context, in *RevokeDeviceCertificateRequest, opts ...grpc.CallOption) (*RevokeDeviceCertificateResponse, error) {
	out := new(RevokeDeviceCertificateResponse)
	err := c.cc.Invoke(ctx, DeviceService_RevokeDeviceCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceServiceServer is the server API for DeviceService service.
// All implementations must embed UnimplementedDeviceServiceServer
// for forward compatibility
type DeviceServiceServer interface {
	// Device CRUD Operations
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Device Status Management
	UpdateDeviceStatus(context.Context, *UpdateDeviceStatusRequest) (*UpdateDeviceStatusResponse, error)
	GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error)
	SyncDeviceStatus(context.Context, *SyncDeviceStatusRequest) (*SyncDeviceStatusResponse, error)
	// Device Configuration
	GetDeviceConfiguration(context.Context, *GetDeviceConfigurationRequest) (*GetDeviceConfigurationResponse, error)
	UpdateDeviceConfiguration(context.Context, *UpdateDeviceConfigurationRequest) (*UpdateDeviceConfigurationResponse, error)
	// Device Commands
	SendDeviceCommand(context.Context, *SendDeviceCommandRequest) (*SendDeviceCommandResponse, error)
	GetCommandStatus(context.Context, *GetCommandStatusRequest) (*GetCommandStatusResponse, error)
	ListCommands(context.Context, *ListCommandsRequest) (*ListCommandsResponse, error)
	// Device Health
	GetDeviceHealth(context.Context, *GetDeviceHealthRequest) (*GetDeviceHealthResponse, error)
	CheckDeviceConnectivity(context.Context, *CheckDeviceConnectivityRequest) (*CheckDeviceConnectivityResponse, error)
	// Device Registration
	RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error)
	RegisterDeviceByQR(context.Context, *RegisterDeviceByQRRequest) (*RegisterDeviceResponse, error)
	RegisterDeviceByID(context.Context, *RegisterDeviceByIDRequest) (*RegisterDeviceResponse, error)
	VerifyDevice(context.Context, *VerifyDeviceRequest) (*VerifyDeviceResponse, error)
	UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error)
	RevokeDeviceCertificate(context.Context, *RevokeDeviceCertificateRequest) (*RevokeDeviceCertificateResponse, error)
	mustEmbedUnimplementedDeviceServiceServer()
}

// UnimplementedDeviceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceServiceServer struct {
}

func (UnimplementedDeviceServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceServiceServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDeviceStatus(context.Context, *UpdateDeviceStatusRequest) (*UpdateDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceStatus not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceStatus(context.Context, *GetDeviceStatusRequest) (*GetDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceStatus not implemented")
}
func (UnimplementedDeviceServiceServer) SyncDeviceStatus(context.Context, *SyncDeviceStatusRequest) (*SyncDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncDeviceStatus not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceConfiguration(context.Context, *GetDeviceConfigurationRequest) (*GetDeviceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceConfiguration not implemented")
}
func (UnimplementedDeviceServiceServer) UpdateDeviceConfiguration(context.Context, *UpdateDeviceConfigurationRequest) (*UpdateDeviceConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceConfiguration not implemented")
}
func (UnimplementedDeviceServiceServer) SendDeviceCommand(context.Context, *SendDeviceCommandRequest) (*SendDeviceCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendDeviceCommand not implemented")
}
func (UnimplementedDeviceServiceServer) GetCommandStatus(context.Context, *GetCommandStatusRequest) (*GetCommandStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandStatus not implemented")
}
func (UnimplementedDeviceServiceServer) ListCommands(context.Context, *ListCommandsRequest) (*ListCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommands not implemented")
}
func (UnimplementedDeviceServiceServer) GetDeviceHealth(context.Context, *GetDeviceHealthRequest) (*GetDeviceHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceHealth not implemented")
}
func (UnimplementedDeviceServiceServer) CheckDeviceConnectivity(context.Context, *CheckDeviceConnectivityRequest) (*CheckDeviceConnectivityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckDeviceConnectivity not implemented")
}
func (UnimplementedDeviceServiceServer) RegisterDevice(context.Context, *RegisterDeviceRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedDeviceServiceServer) RegisterDeviceByQR(context.Context, *RegisterDeviceByQRRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeviceByQR not implemented")
}
func (UnimplementedDeviceServiceServer) RegisterDeviceByID(context.Context, *RegisterDeviceByIDRequest) (*RegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDeviceByID not implemented")
}
func (UnimplementedDeviceServiceServer) VerifyDevice(context.Context, *VerifyDeviceRequest) (*VerifyDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyDevice not implemented")
}
func (UnimplementedDeviceServiceServer) UnregisterDevice(context.Context, *UnregisterDeviceRequest) (*UnregisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterDevice not implemented")
}
func (UnimplementedDeviceServiceServer) RevokeDeviceCertificate(context.Context, *RevokeDeviceCertificateRequest) (*RevokeDeviceCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDeviceCertificate not implemented")
}
func (UnimplementedDeviceServiceServer) mustEmbedUnimplementedDeviceServiceServer() {}

// UnsafeDeviceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceServiceServer will
// result in compilation errors.
type UnsafeDeviceServiceServer interface {
	mustEmbedUnimplementedDeviceServiceServer()
}

func RegisterDeviceServiceServer(s grpc.ServiceRegistrar, srv DeviceServiceServer) {
	s.RegisterService(&DeviceService_ServiceDesc, srv)
}

func _DeviceService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDeviceStatus(ctx, req.(*UpdateDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceStatus(ctx, req.(*GetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SyncDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SyncDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SyncDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SyncDeviceStatus(ctx, req.(*SyncDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDeviceConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceConfiguration(ctx, req.(*GetDeviceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UpdateDeviceConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UpdateDeviceConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UpdateDeviceConfiguration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UpdateDeviceConfiguration(ctx, req.(*UpdateDeviceConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_SendDeviceCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendDeviceCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).SendDeviceCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_SendDeviceCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).SendDeviceCommand(ctx, req.(*SendDeviceCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetCommandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetCommandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetCommandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetCommandStatus(ctx, req.(*GetCommandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_ListCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).ListCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_ListCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).ListCommands(ctx, req.(*ListCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_GetDeviceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).GetDeviceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_GetDeviceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).GetDeviceHealth(ctx, req.(*GetDeviceHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_CheckDeviceConnectivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckDeviceConnectivityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).CheckDeviceConnectivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_CheckDeviceConnectivity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).CheckDeviceConnectivity(ctx, req.(*CheckDeviceConnectivityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RegisterDevice(ctx, req.(*RegisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RegisterDeviceByQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceByQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RegisterDeviceByQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RegisterDeviceByQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RegisterDeviceByQR(ctx, req.(*RegisterDeviceByQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RegisterDeviceByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDeviceByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RegisterDeviceByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RegisterDeviceByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RegisterDeviceByID(ctx, req.(*RegisterDeviceByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_VerifyDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).VerifyDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_VerifyDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).VerifyDevice(ctx, req.(*VerifyDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_UnregisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).UnregisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_UnregisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).UnregisterDevice(ctx, req.(*UnregisterDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceService_RevokeDeviceCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeDeviceCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceServiceServer).RevokeDeviceCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceService_RevokeDeviceCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceServiceServer).RevokeDeviceCertificate(ctx, req.(*RevokeDeviceCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceService_ServiceDesc is the grpc.ServiceDesc for DeviceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device.DeviceService",
	HandlerType: (*DeviceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceService_DeleteDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceService_ListDevices_Handler,
		},
		{
			MethodName: "UpdateDeviceStatus",
			Handler:    _DeviceService_UpdateDeviceStatus_Handler,
		},
		{
			MethodName: "GetDeviceStatus",
			Handler:    _DeviceService_GetDeviceStatus_Handler,
		},
		{
			MethodName: "SyncDeviceStatus",
			Handler:    _DeviceService_SyncDeviceStatus_Handler,
		},
		{
			MethodName: "GetDeviceConfiguration",
			Handler:    _DeviceService_GetDeviceConfiguration_Handler,
		},
		{
			MethodName: "UpdateDeviceConfiguration",
			Handler:    _DeviceService_UpdateDeviceConfiguration_Handler,
		},
		{
			MethodName: "SendDeviceCommand",
			Handler:    _DeviceService_SendDeviceCommand_Handler,
		},
		{
			MethodName: "GetCommandStatus",
			Handler:    _DeviceService_GetCommandStatus_Handler,
		},
		{
			MethodName: "ListCommands",
			Handler:    _DeviceService_ListCommands_Handler,
		},
		{
			MethodName: "GetDeviceHealth",
			Handler:    _DeviceService_GetDeviceHealth_Handler,
		},
		{
			MethodName: "CheckDeviceConnectivity",
			Handler:    _DeviceService_CheckDeviceConnectivity_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _DeviceService_RegisterDevice_Handler,
		},
		{
			MethodName: "RegisterDeviceByQR",
			Handler:    _DeviceService_RegisterDeviceByQR_Handler,
		},
		{
			MethodName: "RegisterDeviceByID",
			Handler:    _DeviceService_RegisterDeviceByID_Handler,
		},
		{
			MethodName: "VerifyDevice",
			Handler:    _DeviceService_VerifyDevice_Handler,
		},
		{
			MethodName: "UnregisterDevice",
			Handler:    _DeviceService_UnregisterDevice_Handler,
		},
		{
			MethodName: "RevokeDeviceCertificate",
			Handler:    _DeviceService_RevokeDeviceCertificate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device/device.proto",
}
