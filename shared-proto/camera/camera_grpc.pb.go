// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: camera/camera.proto

package camera

import (
	context "context"
	common "github.com/brianwong1861/smartcam-common/shared-proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CameraService_GetCamera_FullMethodName        = "/camera.CameraService/GetCamera"
	CameraService_ListCameras_FullMethodName      = "/camera.CameraService/ListCameras"
	CameraService_CreateCamera_FullMethodName     = "/camera.CameraService/CreateCamera"
	CameraService_UpdateCamera_FullMethodName     = "/camera.CameraService/UpdateCamera"
	CameraService_DeleteCamera_FullMethodName     = "/camera.CameraService/DeleteCamera"
	CameraService_SendCommand_FullMethodName      = "/camera.CameraService/SendCommand"
	CameraService_GetCommandStatus_FullMethodName = "/camera.CameraService/GetCommandStatus"
)

// CameraServiceClient is the client API for CameraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CameraServiceClient interface {
	// Device management
	GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*Camera, error)
	ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error)
	CreateCamera(ctx context.Context, in *CreateCameraRequest, opts ...grpc.CallOption) (*Camera, error)
	UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*Camera, error)
	DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*common.CommonResponse, error)
	// Device commands
	SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*DeviceCommand, error)
	GetCommandStatus(ctx context.Context, in *GetCommandStatusRequest, opts ...grpc.CallOption) (*DeviceCommand, error)
}

type cameraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCameraServiceClient(cc grpc.ClientConnInterface) CameraServiceClient {
	return &cameraServiceClient{cc}
}

func (c *cameraServiceClient) GetCamera(ctx context.Context, in *GetCameraRequest, opts ...grpc.CallOption) (*Camera, error) {
	out := new(Camera)
	err := c.cc.Invoke(ctx, CameraService_GetCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) ListCameras(ctx context.Context, in *ListCamerasRequest, opts ...grpc.CallOption) (*ListCamerasResponse, error) {
	out := new(ListCamerasResponse)
	err := c.cc.Invoke(ctx, CameraService_ListCameras_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) CreateCamera(ctx context.Context, in *CreateCameraRequest, opts ...grpc.CallOption) (*Camera, error) {
	out := new(Camera)
	err := c.cc.Invoke(ctx, CameraService_CreateCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) UpdateCamera(ctx context.Context, in *UpdateCameraRequest, opts ...grpc.CallOption) (*Camera, error) {
	out := new(Camera)
	err := c.cc.Invoke(ctx, CameraService_UpdateCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) DeleteCamera(ctx context.Context, in *DeleteCameraRequest, opts ...grpc.CallOption) (*common.CommonResponse, error) {
	out := new(common.CommonResponse)
	err := c.cc.Invoke(ctx, CameraService_DeleteCamera_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) SendCommand(ctx context.Context, in *SendCommandRequest, opts ...grpc.CallOption) (*DeviceCommand, error) {
	out := new(DeviceCommand)
	err := c.cc.Invoke(ctx, CameraService_SendCommand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cameraServiceClient) GetCommandStatus(ctx context.Context, in *GetCommandStatusRequest, opts ...grpc.CallOption) (*DeviceCommand, error) {
	out := new(DeviceCommand)
	err := c.cc.Invoke(ctx, CameraService_GetCommandStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CameraServiceServer is the server API for CameraService service.
// All implementations must embed UnimplementedCameraServiceServer
// for forward compatibility
type CameraServiceServer interface {
	// Device management
	GetCamera(context.Context, *GetCameraRequest) (*Camera, error)
	ListCameras(context.Context, *ListCamerasRequest) (*ListCamerasResponse, error)
	CreateCamera(context.Context, *CreateCameraRequest) (*Camera, error)
	UpdateCamera(context.Context, *UpdateCameraRequest) (*Camera, error)
	DeleteCamera(context.Context, *DeleteCameraRequest) (*common.CommonResponse, error)
	// Device commands
	SendCommand(context.Context, *SendCommandRequest) (*DeviceCommand, error)
	GetCommandStatus(context.Context, *GetCommandStatusRequest) (*DeviceCommand, error)
	mustEmbedUnimplementedCameraServiceServer()
}

// UnimplementedCameraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCameraServiceServer struct {
}

func (UnimplementedCameraServiceServer) GetCamera(context.Context, *GetCameraRequest) (*Camera, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCamera not implemented")
}
func (UnimplementedCameraServiceServer) ListCameras(context.Context, *ListCamerasRequest) (*ListCamerasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCameras not implemented")
}
func (UnimplementedCameraServiceServer) CreateCamera(context.Context, *CreateCameraRequest) (*Camera, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCamera not implemented")
}
func (UnimplementedCameraServiceServer) UpdateCamera(context.Context, *UpdateCameraRequest) (*Camera, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCamera not implemented")
}
func (UnimplementedCameraServiceServer) DeleteCamera(context.Context, *DeleteCameraRequest) (*common.CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCamera not implemented")
}
func (UnimplementedCameraServiceServer) SendCommand(context.Context, *SendCommandRequest) (*DeviceCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedCameraServiceServer) GetCommandStatus(context.Context, *GetCommandStatusRequest) (*DeviceCommand, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandStatus not implemented")
}
func (UnimplementedCameraServiceServer) mustEmbedUnimplementedCameraServiceServer() {}

// UnsafeCameraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CameraServiceServer will
// result in compilation errors.
type UnsafeCameraServiceServer interface {
	mustEmbedUnimplementedCameraServiceServer()
}

func RegisterCameraServiceServer(s grpc.ServiceRegistrar, srv CameraServiceServer) {
	s.RegisterService(&CameraService_ServiceDesc, srv)
}

func _CameraService_GetCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_GetCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetCamera(ctx, req.(*GetCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_ListCameras_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCamerasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).ListCameras(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_ListCameras_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).ListCameras(ctx, req.(*ListCamerasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_CreateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).CreateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_CreateCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).CreateCamera(ctx, req.(*CreateCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_UpdateCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).UpdateCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_UpdateCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).UpdateCamera(ctx, req.(*UpdateCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_DeleteCamera_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCameraRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).DeleteCamera(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_DeleteCamera_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).DeleteCamera(ctx, req.(*DeleteCameraRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).SendCommand(ctx, req.(*SendCommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CameraService_GetCommandStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CameraServiceServer).GetCommandStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CameraService_GetCommandStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CameraServiceServer).GetCommandStatus(ctx, req.(*GetCommandStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CameraService_ServiceDesc is the grpc.ServiceDesc for CameraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CameraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "camera.CameraService",
	HandlerType: (*CameraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCamera",
			Handler:    _CameraService_GetCamera_Handler,
		},
		{
			MethodName: "ListCameras",
			Handler:    _CameraService_ListCameras_Handler,
		},
		{
			MethodName: "CreateCamera",
			Handler:    _CameraService_CreateCamera_Handler,
		},
		{
			MethodName: "UpdateCamera",
			Handler:    _CameraService_UpdateCamera_Handler,
		},
		{
			MethodName: "DeleteCamera",
			Handler:    _CameraService_DeleteCamera_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _CameraService_SendCommand_Handler,
		},
		{
			MethodName: "GetCommandStatus",
			Handler:    _CameraService_GetCommandStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "camera/camera.proto",
}
