// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v6.32.1
// source: quota/quota.proto

package quota

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuotaService_CreateStorageQuota_FullMethodName     = "/quota.QuotaService/CreateStorageQuota"
	QuotaService_GetStorageQuota_FullMethodName        = "/quota.QuotaService/GetStorageQuota"
	QuotaService_UpdateStorageQuota_FullMethodName     = "/quota.QuotaService/UpdateStorageQuota"
	QuotaService_DeleteStorageQuota_FullMethodName     = "/quota.QuotaService/DeleteStorageQuota"
	QuotaService_ListStorageQuotas_FullMethodName      = "/quota.QuotaService/ListStorageQuotas"
	QuotaService_UpdateQuotaUsage_FullMethodName       = "/quota.QuotaService/UpdateQuotaUsage"
	QuotaService_GetQuotaUsage_FullMethodName          = "/quota.QuotaService/GetQuotaUsage"
	QuotaService_ListQuotaUsage_FullMethodName         = "/quota.QuotaService/ListQuotaUsage"
	QuotaService_GetQuotaAlerts_FullMethodName         = "/quota.QuotaService/GetQuotaAlerts"
	QuotaService_MarkAlertAsRead_FullMethodName        = "/quota.QuotaService/MarkAlertAsRead"
	QuotaService_ListQuotaAlerts_FullMethodName        = "/quota.QuotaService/ListQuotaAlerts"
	QuotaService_GetQuotaHistory_FullMethodName        = "/quota.QuotaService/GetQuotaHistory"
	QuotaService_ListQuotaHistory_FullMethodName       = "/quota.QuotaService/ListQuotaHistory"
	QuotaService_GetQuotaStats_FullMethodName          = "/quota.QuotaService/GetQuotaStats"
	QuotaService_GetTenantQuotaOverview_FullMethodName = "/quota.QuotaService/GetTenantQuotaOverview"
)

// QuotaServiceClient is the client API for QuotaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaServiceClient interface {
	// Storage Quota Operations
	CreateStorageQuota(ctx context.Context, in *CreateStorageQuotaRequest, opts ...grpc.CallOption) (*CreateStorageQuotaResponse, error)
	GetStorageQuota(ctx context.Context, in *GetStorageQuotaRequest, opts ...grpc.CallOption) (*GetStorageQuotaResponse, error)
	UpdateStorageQuota(ctx context.Context, in *UpdateStorageQuotaRequest, opts ...grpc.CallOption) (*UpdateStorageQuotaResponse, error)
	DeleteStorageQuota(ctx context.Context, in *DeleteStorageQuotaRequest, opts ...grpc.CallOption) (*DeleteStorageQuotaResponse, error)
	ListStorageQuotas(ctx context.Context, in *ListStorageQuotasRequest, opts ...grpc.CallOption) (*ListStorageQuotasResponse, error)
	// Quota Usage Operations
	UpdateQuotaUsage(ctx context.Context, in *UpdateQuotaUsageRequest, opts ...grpc.CallOption) (*UpdateQuotaUsageResponse, error)
	GetQuotaUsage(ctx context.Context, in *GetQuotaUsageRequest, opts ...grpc.CallOption) (*GetQuotaUsageResponse, error)
	ListQuotaUsage(ctx context.Context, in *ListQuotaUsageRequest, opts ...grpc.CallOption) (*ListQuotaUsageResponse, error)
	// Quota Alert Operations
	GetQuotaAlerts(ctx context.Context, in *GetQuotaAlertsRequest, opts ...grpc.CallOption) (*GetQuotaAlertsResponse, error)
	MarkAlertAsRead(ctx context.Context, in *MarkAlertAsReadRequest, opts ...grpc.CallOption) (*MarkAlertAsReadResponse, error)
	ListQuotaAlerts(ctx context.Context, in *ListQuotaAlertsRequest, opts ...grpc.CallOption) (*ListQuotaAlertsResponse, error)
	// Quota History Operations
	GetQuotaHistory(ctx context.Context, in *GetQuotaHistoryRequest, opts ...grpc.CallOption) (*GetQuotaHistoryResponse, error)
	ListQuotaHistory(ctx context.Context, in *ListQuotaHistoryRequest, opts ...grpc.CallOption) (*ListQuotaHistoryResponse, error)
	// Statistics and Analytics
	GetQuotaStats(ctx context.Context, in *GetQuotaStatsRequest, opts ...grpc.CallOption) (*GetQuotaStatsResponse, error)
	GetTenantQuotaOverview(ctx context.Context, in *GetTenantQuotaOverviewRequest, opts ...grpc.CallOption) (*GetTenantQuotaOverviewResponse, error)
}

type quotaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaServiceClient(cc grpc.ClientConnInterface) QuotaServiceClient {
	return &quotaServiceClient{cc}
}

func (c *quotaServiceClient) CreateStorageQuota(ctx context.Context, in *CreateStorageQuotaRequest, opts ...grpc.CallOption) (*CreateStorageQuotaResponse, error) {
	out := new(CreateStorageQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_CreateStorageQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetStorageQuota(ctx context.Context, in *GetStorageQuotaRequest, opts ...grpc.CallOption) (*GetStorageQuotaResponse, error) {
	out := new(GetStorageQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetStorageQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) UpdateStorageQuota(ctx context.Context, in *UpdateStorageQuotaRequest, opts ...grpc.CallOption) (*UpdateStorageQuotaResponse, error) {
	out := new(UpdateStorageQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_UpdateStorageQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) DeleteStorageQuota(ctx context.Context, in *DeleteStorageQuotaRequest, opts ...grpc.CallOption) (*DeleteStorageQuotaResponse, error) {
	out := new(DeleteStorageQuotaResponse)
	err := c.cc.Invoke(ctx, QuotaService_DeleteStorageQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) ListStorageQuotas(ctx context.Context, in *ListStorageQuotasRequest, opts ...grpc.CallOption) (*ListStorageQuotasResponse, error) {
	out := new(ListStorageQuotasResponse)
	err := c.cc.Invoke(ctx, QuotaService_ListStorageQuotas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) UpdateQuotaUsage(ctx context.Context, in *UpdateQuotaUsageRequest, opts ...grpc.CallOption) (*UpdateQuotaUsageResponse, error) {
	out := new(UpdateQuotaUsageResponse)
	err := c.cc.Invoke(ctx, QuotaService_UpdateQuotaUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaUsage(ctx context.Context, in *GetQuotaUsageRequest, opts ...grpc.CallOption) (*GetQuotaUsageResponse, error) {
	out := new(GetQuotaUsageResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) ListQuotaUsage(ctx context.Context, in *ListQuotaUsageRequest, opts ...grpc.CallOption) (*ListQuotaUsageResponse, error) {
	out := new(ListQuotaUsageResponse)
	err := c.cc.Invoke(ctx, QuotaService_ListQuotaUsage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaAlerts(ctx context.Context, in *GetQuotaAlertsRequest, opts ...grpc.CallOption) (*GetQuotaAlertsResponse, error) {
	out := new(GetQuotaAlertsResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) MarkAlertAsRead(ctx context.Context, in *MarkAlertAsReadRequest, opts ...grpc.CallOption) (*MarkAlertAsReadResponse, error) {
	out := new(MarkAlertAsReadResponse)
	err := c.cc.Invoke(ctx, QuotaService_MarkAlertAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) ListQuotaAlerts(ctx context.Context, in *ListQuotaAlertsRequest, opts ...grpc.CallOption) (*ListQuotaAlertsResponse, error) {
	out := new(ListQuotaAlertsResponse)
	err := c.cc.Invoke(ctx, QuotaService_ListQuotaAlerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaHistory(ctx context.Context, in *GetQuotaHistoryRequest, opts ...grpc.CallOption) (*GetQuotaHistoryResponse, error) {
	out := new(GetQuotaHistoryResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) ListQuotaHistory(ctx context.Context, in *ListQuotaHistoryRequest, opts ...grpc.CallOption) (*ListQuotaHistoryResponse, error) {
	out := new(ListQuotaHistoryResponse)
	err := c.cc.Invoke(ctx, QuotaService_ListQuotaHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetQuotaStats(ctx context.Context, in *GetQuotaStatsRequest, opts ...grpc.CallOption) (*GetQuotaStatsResponse, error) {
	out := new(GetQuotaStatsResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetQuotaStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaServiceClient) GetTenantQuotaOverview(ctx context.Context, in *GetTenantQuotaOverviewRequest, opts ...grpc.CallOption) (*GetTenantQuotaOverviewResponse, error) {
	out := new(GetTenantQuotaOverviewResponse)
	err := c.cc.Invoke(ctx, QuotaService_GetTenantQuotaOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaServiceServer is the server API for QuotaService service.
// All implementations must embed UnimplementedQuotaServiceServer
// for forward compatibility
type QuotaServiceServer interface {
	// Storage Quota Operations
	CreateStorageQuota(context.Context, *CreateStorageQuotaRequest) (*CreateStorageQuotaResponse, error)
	GetStorageQuota(context.Context, *GetStorageQuotaRequest) (*GetStorageQuotaResponse, error)
	UpdateStorageQuota(context.Context, *UpdateStorageQuotaRequest) (*UpdateStorageQuotaResponse, error)
	DeleteStorageQuota(context.Context, *DeleteStorageQuotaRequest) (*DeleteStorageQuotaResponse, error)
	ListStorageQuotas(context.Context, *ListStorageQuotasRequest) (*ListStorageQuotasResponse, error)
	// Quota Usage Operations
	UpdateQuotaUsage(context.Context, *UpdateQuotaUsageRequest) (*UpdateQuotaUsageResponse, error)
	GetQuotaUsage(context.Context, *GetQuotaUsageRequest) (*GetQuotaUsageResponse, error)
	ListQuotaUsage(context.Context, *ListQuotaUsageRequest) (*ListQuotaUsageResponse, error)
	// Quota Alert Operations
	GetQuotaAlerts(context.Context, *GetQuotaAlertsRequest) (*GetQuotaAlertsResponse, error)
	MarkAlertAsRead(context.Context, *MarkAlertAsReadRequest) (*MarkAlertAsReadResponse, error)
	ListQuotaAlerts(context.Context, *ListQuotaAlertsRequest) (*ListQuotaAlertsResponse, error)
	// Quota History Operations
	GetQuotaHistory(context.Context, *GetQuotaHistoryRequest) (*GetQuotaHistoryResponse, error)
	ListQuotaHistory(context.Context, *ListQuotaHistoryRequest) (*ListQuotaHistoryResponse, error)
	// Statistics and Analytics
	GetQuotaStats(context.Context, *GetQuotaStatsRequest) (*GetQuotaStatsResponse, error)
	GetTenantQuotaOverview(context.Context, *GetTenantQuotaOverviewRequest) (*GetTenantQuotaOverviewResponse, error)
	mustEmbedUnimplementedQuotaServiceServer()
}

// UnimplementedQuotaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQuotaServiceServer struct {
}

func (UnimplementedQuotaServiceServer) CreateStorageQuota(context.Context, *CreateStorageQuotaRequest) (*CreateStorageQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStorageQuota not implemented")
}
func (UnimplementedQuotaServiceServer) GetStorageQuota(context.Context, *GetStorageQuotaRequest) (*GetStorageQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStorageQuota not implemented")
}
func (UnimplementedQuotaServiceServer) UpdateStorageQuota(context.Context, *UpdateStorageQuotaRequest) (*UpdateStorageQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStorageQuota not implemented")
}
func (UnimplementedQuotaServiceServer) DeleteStorageQuota(context.Context, *DeleteStorageQuotaRequest) (*DeleteStorageQuotaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStorageQuota not implemented")
}
func (UnimplementedQuotaServiceServer) ListStorageQuotas(context.Context, *ListStorageQuotasRequest) (*ListStorageQuotasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStorageQuotas not implemented")
}
func (UnimplementedQuotaServiceServer) UpdateQuotaUsage(context.Context, *UpdateQuotaUsageRequest) (*UpdateQuotaUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuotaUsage not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaUsage(context.Context, *GetQuotaUsageRequest) (*GetQuotaUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaUsage not implemented")
}
func (UnimplementedQuotaServiceServer) ListQuotaUsage(context.Context, *ListQuotaUsageRequest) (*ListQuotaUsageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotaUsage not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaAlerts(context.Context, *GetQuotaAlertsRequest) (*GetQuotaAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaAlerts not implemented")
}
func (UnimplementedQuotaServiceServer) MarkAlertAsRead(context.Context, *MarkAlertAsReadRequest) (*MarkAlertAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAlertAsRead not implemented")
}
func (UnimplementedQuotaServiceServer) ListQuotaAlerts(context.Context, *ListQuotaAlertsRequest) (*ListQuotaAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotaAlerts not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaHistory(context.Context, *GetQuotaHistoryRequest) (*GetQuotaHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaHistory not implemented")
}
func (UnimplementedQuotaServiceServer) ListQuotaHistory(context.Context, *ListQuotaHistoryRequest) (*ListQuotaHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuotaHistory not implemented")
}
func (UnimplementedQuotaServiceServer) GetQuotaStats(context.Context, *GetQuotaStatsRequest) (*GetQuotaStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotaStats not implemented")
}
func (UnimplementedQuotaServiceServer) GetTenantQuotaOverview(context.Context, *GetTenantQuotaOverviewRequest) (*GetTenantQuotaOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenantQuotaOverview not implemented")
}
func (UnimplementedQuotaServiceServer) mustEmbedUnimplementedQuotaServiceServer() {}

// UnsafeQuotaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaServiceServer will
// result in compilation errors.
type UnsafeQuotaServiceServer interface {
	mustEmbedUnimplementedQuotaServiceServer()
}

func RegisterQuotaServiceServer(s grpc.ServiceRegistrar, srv QuotaServiceServer) {
	s.RegisterService(&QuotaService_ServiceDesc, srv)
}

func _QuotaService_CreateStorageQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStorageQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).CreateStorageQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_CreateStorageQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).CreateStorageQuota(ctx, req.(*CreateStorageQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetStorageQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStorageQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetStorageQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetStorageQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetStorageQuota(ctx, req.(*GetStorageQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_UpdateStorageQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStorageQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).UpdateStorageQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_UpdateStorageQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).UpdateStorageQuota(ctx, req.(*UpdateStorageQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_DeleteStorageQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStorageQuotaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).DeleteStorageQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_DeleteStorageQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).DeleteStorageQuota(ctx, req.(*DeleteStorageQuotaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_ListStorageQuotas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStorageQuotasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).ListStorageQuotas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_ListStorageQuotas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).ListStorageQuotas(ctx, req.(*ListStorageQuotasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_UpdateQuotaUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuotaUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).UpdateQuotaUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_UpdateQuotaUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).UpdateQuotaUsage(ctx, req.(*UpdateQuotaUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaUsage(ctx, req.(*GetQuotaUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_ListQuotaUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaUsageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).ListQuotaUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_ListQuotaUsage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).ListQuotaUsage(ctx, req.(*ListQuotaUsageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaAlerts(ctx, req.(*GetQuotaAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_MarkAlertAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAlertAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).MarkAlertAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_MarkAlertAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).MarkAlertAsRead(ctx, req.(*MarkAlertAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_ListQuotaAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).ListQuotaAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_ListQuotaAlerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).ListQuotaAlerts(ctx, req.(*ListQuotaAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaHistory(ctx, req.(*GetQuotaHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_ListQuotaHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).ListQuotaHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_ListQuotaHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).ListQuotaHistory(ctx, req.(*ListQuotaHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetQuotaStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetQuotaStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetQuotaStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetQuotaStats(ctx, req.(*GetQuotaStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaService_GetTenantQuotaOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantQuotaOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaServiceServer).GetTenantQuotaOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaService_GetTenantQuotaOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaServiceServer).GetTenantQuotaOverview(ctx, req.(*GetTenantQuotaOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaService_ServiceDesc is the grpc.ServiceDesc for QuotaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quota.QuotaService",
	HandlerType: (*QuotaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStorageQuota",
			Handler:    _QuotaService_CreateStorageQuota_Handler,
		},
		{
			MethodName: "GetStorageQuota",
			Handler:    _QuotaService_GetStorageQuota_Handler,
		},
		{
			MethodName: "UpdateStorageQuota",
			Handler:    _QuotaService_UpdateStorageQuota_Handler,
		},
		{
			MethodName: "DeleteStorageQuota",
			Handler:    _QuotaService_DeleteStorageQuota_Handler,
		},
		{
			MethodName: "ListStorageQuotas",
			Handler:    _QuotaService_ListStorageQuotas_Handler,
		},
		{
			MethodName: "UpdateQuotaUsage",
			Handler:    _QuotaService_UpdateQuotaUsage_Handler,
		},
		{
			MethodName: "GetQuotaUsage",
			Handler:    _QuotaService_GetQuotaUsage_Handler,
		},
		{
			MethodName: "ListQuotaUsage",
			Handler:    _QuotaService_ListQuotaUsage_Handler,
		},
		{
			MethodName: "GetQuotaAlerts",
			Handler:    _QuotaService_GetQuotaAlerts_Handler,
		},
		{
			MethodName: "MarkAlertAsRead",
			Handler:    _QuotaService_MarkAlertAsRead_Handler,
		},
		{
			MethodName: "ListQuotaAlerts",
			Handler:    _QuotaService_ListQuotaAlerts_Handler,
		},
		{
			MethodName: "GetQuotaHistory",
			Handler:    _QuotaService_GetQuotaHistory_Handler,
		},
		{
			MethodName: "ListQuotaHistory",
			Handler:    _QuotaService_ListQuotaHistory_Handler,
		},
		{
			MethodName: "GetQuotaStats",
			Handler:    _QuotaService_GetQuotaStats_Handler,
		},
		{
			MethodName: "GetTenantQuotaOverview",
			Handler:    _QuotaService_GetTenantQuotaOverview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quota/quota.proto",
}
